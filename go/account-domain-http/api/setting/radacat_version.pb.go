// Code generated by protoc-gen-go. DO NOT EDIT.
// source: radacat_version.proto

/*
Package setting is a generated protocol buffer package.

It is generated from these files:
	radacat_version.proto

It has these top-level messages:
	Version
	AddNewVersionRequest
	AddNewVersionResponse
	GetAllVersionsRequest
	GetAllVersionsResponse
	GetLatestVersionRequest
	GetLatestVersionResponse
	DeleteVersionRequest
	DeleteVersionResponse
	UpdateVersionRequest
	UpdateVersionResponse
	GetVersionRequest
	GetVersionResponse
*/
package setting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	Device        string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	VersionName   string `protobuf:"bytes,2,opt,name=versionName" json:"versionName,omitempty"`
	VersionCode   string `protobuf:"bytes,3,opt,name=versionCode" json:"versionCode,omitempty"`
	Md5           string `protobuf:"bytes,4,opt,name=md5" json:"md5,omitempty"`
	FileName      string `protobuf:"bytes,5,opt,name=fileName" json:"fileName,omitempty"`
	Length        int64  `protobuf:"varint,6,opt,name=length" json:"length,omitempty"`
	Path          string `protobuf:"bytes,7,opt,name=path" json:"path,omitempty"`
	DescriptionCn string `protobuf:"bytes,8,opt,name=descriptionCn" json:"descriptionCn,omitempty"`
	DescriptionEn string `protobuf:"bytes,9,opt,name=descriptionEn" json:"descriptionEn,omitempty"`
	UploaderUid   int64  `protobuf:"varint,10,opt,name=uploaderUid" json:"uploaderUid,omitempty"`
	Status        int32  `protobuf:"varint,11,opt,name=status" json:"status,omitempty"`
	Id            int32  `protobuf:"varint,12,opt,name=id" json:"id,omitempty"`
	CreateTime    int64  `protobuf:"varint,13,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime    int64  `protobuf:"varint,14,opt,name=updateTime" json:"updateTime,omitempty"`
	Tid           int64  `protobuf:"varint,15,opt,name=tid" json:"tid,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Version) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *Version) GetVersionCode() string {
	if m != nil {
		return m.VersionCode
	}
	return ""
}

func (m *Version) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *Version) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Version) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Version) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Version) GetDescriptionCn() string {
	if m != nil {
		return m.DescriptionCn
	}
	return ""
}

func (m *Version) GetDescriptionEn() string {
	if m != nil {
		return m.DescriptionEn
	}
	return ""
}

func (m *Version) GetUploaderUid() int64 {
	if m != nil {
		return m.UploaderUid
	}
	return 0
}

func (m *Version) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Version) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Version) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Version) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Version) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type AddNewVersionRequest struct {
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *AddNewVersionRequest) Reset()                    { *m = AddNewVersionRequest{} }
func (m *AddNewVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*AddNewVersionRequest) ProtoMessage()               {}
func (*AddNewVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddNewVersionRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type AddNewVersionResponse struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *AddNewVersionResponse) Reset()                    { *m = AddNewVersionResponse{} }
func (m *AddNewVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*AddNewVersionResponse) ProtoMessage()               {}
func (*AddNewVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddNewVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetAllVersionsRequest struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Tid   int64 `protobuf:"varint,3,opt,name=tid" json:"tid,omitempty"`
}

func (m *GetAllVersionsRequest) Reset()                    { *m = GetAllVersionsRequest{} }
func (m *GetAllVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllVersionsRequest) ProtoMessage()               {}
func (*GetAllVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetAllVersionsRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetAllVersionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllVersionsRequest) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type GetAllVersionsResponse struct {
	ErrorCode  int32      `protobuf:"varint,1,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	Versions   []*Version `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty"`
	TotalCount int32      `protobuf:"varint,3,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (m *GetAllVersionsResponse) Reset()                    { *m = GetAllVersionsResponse{} }
func (m *GetAllVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllVersionsResponse) ProtoMessage()               {}
func (*GetAllVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetAllVersionsResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAllVersionsResponse) GetVersions() []*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GetAllVersionsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type GetLatestVersionRequest struct {
	Device   string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Source   string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *GetLatestVersionRequest) Reset()                    { *m = GetLatestVersionRequest{} }
func (m *GetLatestVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestVersionRequest) ProtoMessage()               {}
func (*GetLatestVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetLatestVersionRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *GetLatestVersionRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GetLatestVersionRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetLatestVersionResponse struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	Version   *Version `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetLatestVersionResponse) Reset()                    { *m = GetLatestVersionResponse{} }
func (m *GetLatestVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLatestVersionResponse) ProtoMessage()               {}
func (*GetLatestVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetLatestVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetLatestVersionResponse) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type DeleteVersionRequest struct {
	Id  int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Tid int64 `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
}

func (m *DeleteVersionRequest) Reset()                    { *m = DeleteVersionRequest{} }
func (m *DeleteVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionRequest) ProtoMessage()               {}
func (*DeleteVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteVersionRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteVersionRequest) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type DeleteVersionResponse struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *DeleteVersionResponse) Reset()                    { *m = DeleteVersionResponse{} }
func (m *DeleteVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionResponse) ProtoMessage()               {}
func (*DeleteVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type UpdateVersionRequest struct {
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateVersionRequest) Reset()                    { *m = UpdateVersionRequest{} }
func (m *UpdateVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersionRequest) ProtoMessage()               {}
func (*UpdateVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateVersionRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type UpdateVersionResponse struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *UpdateVersionResponse) Reset()                    { *m = UpdateVersionResponse{} }
func (m *UpdateVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersionResponse) ProtoMessage()               {}
func (*UpdateVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetVersionRequest struct {
	Id  int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Tid int64 `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
}

func (m *GetVersionRequest) Reset()                    { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()               {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetVersionRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetVersionRequest) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type GetVersionResponse struct {
	ErrorCode int32    `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	Version   *Version `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetVersionResponse) Reset()                    { *m = GetVersionResponse{} }
func (m *GetVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVersionResponse) ProtoMessage()               {}
func (*GetVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetVersionResponse) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func init() {
	proto.RegisterType((*Version)(nil), "setting.Version")
	proto.RegisterType((*AddNewVersionRequest)(nil), "setting.AddNewVersionRequest")
	proto.RegisterType((*AddNewVersionResponse)(nil), "setting.AddNewVersionResponse")
	proto.RegisterType((*GetAllVersionsRequest)(nil), "setting.GetAllVersionsRequest")
	proto.RegisterType((*GetAllVersionsResponse)(nil), "setting.GetAllVersionsResponse")
	proto.RegisterType((*GetLatestVersionRequest)(nil), "setting.GetLatestVersionRequest")
	proto.RegisterType((*GetLatestVersionResponse)(nil), "setting.GetLatestVersionResponse")
	proto.RegisterType((*DeleteVersionRequest)(nil), "setting.DeleteVersionRequest")
	proto.RegisterType((*DeleteVersionResponse)(nil), "setting.DeleteVersionResponse")
	proto.RegisterType((*UpdateVersionRequest)(nil), "setting.UpdateVersionRequest")
	proto.RegisterType((*UpdateVersionResponse)(nil), "setting.UpdateVersionResponse")
	proto.RegisterType((*GetVersionRequest)(nil), "setting.GetVersionRequest")
	proto.RegisterType((*GetVersionResponse)(nil), "setting.GetVersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RadacatVersion service

type RadacatVersionClient interface {
	AddNewVersion(ctx context.Context, in *AddNewVersionRequest, opts ...grpc.CallOption) (*AddNewVersionResponse, error)
	GetAllVersions(ctx context.Context, in *GetAllVersionsRequest, opts ...grpc.CallOption) (*GetAllVersionsResponse, error)
	GetLatestVersion(ctx context.Context, in *GetLatestVersionRequest, opts ...grpc.CallOption) (*GetLatestVersionResponse, error)
	UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*UpdateVersionResponse, error)
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*DeleteVersionResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type radacatVersionClient struct {
	cc *grpc.ClientConn
}

func NewRadacatVersionClient(cc *grpc.ClientConn) RadacatVersionClient {
	return &radacatVersionClient{cc}
}

func (c *radacatVersionClient) AddNewVersion(ctx context.Context, in *AddNewVersionRequest, opts ...grpc.CallOption) (*AddNewVersionResponse, error) {
	out := new(AddNewVersionResponse)
	err := grpc.Invoke(ctx, "/setting.RadacatVersion/AddNewVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radacatVersionClient) GetAllVersions(ctx context.Context, in *GetAllVersionsRequest, opts ...grpc.CallOption) (*GetAllVersionsResponse, error) {
	out := new(GetAllVersionsResponse)
	err := grpc.Invoke(ctx, "/setting.RadacatVersion/GetAllVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radacatVersionClient) GetLatestVersion(ctx context.Context, in *GetLatestVersionRequest, opts ...grpc.CallOption) (*GetLatestVersionResponse, error) {
	out := new(GetLatestVersionResponse)
	err := grpc.Invoke(ctx, "/setting.RadacatVersion/GetLatestVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radacatVersionClient) UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*UpdateVersionResponse, error) {
	out := new(UpdateVersionResponse)
	err := grpc.Invoke(ctx, "/setting.RadacatVersion/UpdateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radacatVersionClient) DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*DeleteVersionResponse, error) {
	out := new(DeleteVersionResponse)
	err := grpc.Invoke(ctx, "/setting.RadacatVersion/DeleteVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radacatVersionClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := grpc.Invoke(ctx, "/setting.RadacatVersion/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RadacatVersion service

type RadacatVersionServer interface {
	AddNewVersion(context.Context, *AddNewVersionRequest) (*AddNewVersionResponse, error)
	GetAllVersions(context.Context, *GetAllVersionsRequest) (*GetAllVersionsResponse, error)
	GetLatestVersion(context.Context, *GetLatestVersionRequest) (*GetLatestVersionResponse, error)
	UpdateVersion(context.Context, *UpdateVersionRequest) (*UpdateVersionResponse, error)
	DeleteVersion(context.Context, *DeleteVersionRequest) (*DeleteVersionResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
}

func RegisterRadacatVersionServer(s *grpc.Server, srv RadacatVersionServer) {
	s.RegisterService(&_RadacatVersion_serviceDesc, srv)
}

func _RadacatVersion_AddNewVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadacatVersionServer).AddNewVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.RadacatVersion/AddNewVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadacatVersionServer).AddNewVersion(ctx, req.(*AddNewVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadacatVersion_GetAllVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadacatVersionServer).GetAllVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.RadacatVersion/GetAllVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadacatVersionServer).GetAllVersions(ctx, req.(*GetAllVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadacatVersion_GetLatestVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadacatVersionServer).GetLatestVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.RadacatVersion/GetLatestVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadacatVersionServer).GetLatestVersion(ctx, req.(*GetLatestVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadacatVersion_UpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadacatVersionServer).UpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.RadacatVersion/UpdateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadacatVersionServer).UpdateVersion(ctx, req.(*UpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadacatVersion_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadacatVersionServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.RadacatVersion/DeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadacatVersionServer).DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadacatVersion_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadacatVersionServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.RadacatVersion/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadacatVersionServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RadacatVersion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "setting.RadacatVersion",
	HandlerType: (*RadacatVersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewVersion",
			Handler:    _RadacatVersion_AddNewVersion_Handler,
		},
		{
			MethodName: "GetAllVersions",
			Handler:    _RadacatVersion_GetAllVersions_Handler,
		},
		{
			MethodName: "GetLatestVersion",
			Handler:    _RadacatVersion_GetLatestVersion_Handler,
		},
		{
			MethodName: "UpdateVersion",
			Handler:    _RadacatVersion_UpdateVersion_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _RadacatVersion_DeleteVersion_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _RadacatVersion_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radacat_version.proto",
}

func init() { proto.RegisterFile("radacat_version.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdf, 0x6e, 0x94, 0x4e,
	0x14, 0x2e, 0xd0, 0xed, 0xb6, 0xa7, 0xbf, 0xdd, 0x5f, 0x9d, 0x74, 0xeb, 0x64, 0xd5, 0x8a, 0xc4,
	0x8b, 0xc6, 0x98, 0x5e, 0xd4, 0x6c, 0xe2, 0x6d, 0xad, 0xcd, 0xde, 0x98, 0xa6, 0xa1, 0xd6, 0xc4,
	0x1b, 0x0d, 0x32, 0xc7, 0x2d, 0x09, 0x0b, 0xc8, 0x0c, 0xf5, 0x05, 0x7c, 0x17, 0x1f, 0x53, 0x33,
	0xc3, 0x00, 0x03, 0x65, 0x75, 0x8d, 0xde, 0xcd, 0xf9, 0xf7, 0xcd, 0x9c, 0xf3, 0x7d, 0x07, 0x60,
	0x92, 0x07, 0x2c, 0x08, 0x03, 0xf1, 0xf1, 0x16, 0x73, 0x1e, 0xa5, 0xc9, 0x71, 0x96, 0xa7, 0x22,
	0x25, 0x43, 0x8e, 0x42, 0x44, 0xc9, 0xc2, 0xfb, 0xee, 0xc0, 0xf0, 0x5d, 0x19, 0x22, 0x07, 0xb0,
	0xc5, 0xf0, 0x36, 0x0a, 0x91, 0x5a, 0xae, 0x75, 0xb4, 0xe3, 0x6b, 0x8b, 0xb8, 0xb0, 0xab, 0xab,
	0x2f, 0x82, 0x25, 0x52, 0x5b, 0x05, 0x4d, 0x97, 0x91, 0x71, 0x96, 0x32, 0xa4, 0x4e, 0x2b, 0x43,
	0xba, 0xc8, 0x1e, 0x38, 0x4b, 0x36, 0xa3, 0x9b, 0x2a, 0x22, 0x8f, 0x64, 0x0a, 0xdb, 0x9f, 0xa3,
	0x18, 0x15, 0xe4, 0x40, 0xb9, 0x6b, 0x5b, 0xbe, 0x24, 0xc6, 0x64, 0x21, 0x6e, 0xe8, 0x96, 0x6b,
	0x1d, 0x39, 0xbe, 0xb6, 0x08, 0x81, 0xcd, 0x2c, 0x10, 0x37, 0x74, 0xa8, 0xf2, 0xd5, 0x99, 0x3c,
	0x85, 0x11, 0x43, 0x1e, 0xe6, 0x51, 0x26, 0xe4, 0x65, 0x09, 0xdd, 0x56, 0xc1, 0xb6, 0xb3, 0x93,
	0x75, 0x9e, 0xd0, 0x9d, 0x3b, 0x59, 0xe7, 0x89, 0xec, 0xa3, 0xc8, 0xe2, 0x34, 0x60, 0x98, 0x5f,
	0x47, 0x8c, 0x82, 0xba, 0xdc, 0x74, 0xc9, 0x97, 0x71, 0x11, 0x88, 0x82, 0xd3, 0x5d, 0xd7, 0x3a,
	0x1a, 0xf8, 0xda, 0x22, 0x63, 0xb0, 0x23, 0x46, 0xff, 0x53, 0x3e, 0x3b, 0x62, 0xe4, 0x10, 0x20,
	0xcc, 0x31, 0x10, 0xf8, 0x36, 0x5a, 0x22, 0x1d, 0x29, 0x20, 0xc3, 0x23, 0xe3, 0x45, 0xc6, 0xaa,
	0xf8, 0xb8, 0x8c, 0x37, 0x1e, 0x39, 0x2f, 0x11, 0x31, 0xfa, 0xbf, 0x0a, 0xc8, 0xa3, 0xf7, 0x0a,
	0xf6, 0x4f, 0x19, 0xbb, 0xc0, 0xaf, 0x9a, 0x2e, 0x1f, 0xbf, 0x14, 0xc8, 0x05, 0x79, 0x06, 0x43,
	0x3d, 0x68, 0x45, 0xdb, 0xee, 0xc9, 0xde, 0xb1, 0x26, 0xf7, 0xb8, 0xca, 0xac, 0x12, 0xbc, 0x19,
	0x4c, 0x3a, 0x18, 0x3c, 0x4b, 0x13, 0x8e, 0xe4, 0x21, 0xec, 0x9c, 0xe7, 0x79, 0x9a, 0x2b, 0xfa,
	0x2c, 0xd5, 0x45, 0xe3, 0xf0, 0xae, 0x60, 0x32, 0x47, 0x71, 0x1a, 0xc7, 0xba, 0x8c, 0x57, 0x77,
	0xef, 0xc3, 0x20, 0x4c, 0x8b, 0x44, 0xe8, 0x92, 0xd2, 0x28, 0x59, 0x5a, 0x94, 0x42, 0x19, 0xf8,
	0xea, 0x5c, 0xf5, 0xe3, 0x34, 0xfd, 0x7c, 0xb3, 0xe0, 0xa0, 0x8b, 0xba, 0xce, 0x6b, 0xc8, 0x73,
	0xd8, 0xd6, 0xfd, 0x70, 0x6a, 0xbb, 0x4e, 0x6f, 0xc7, 0x75, 0x86, 0x1c, 0xb4, 0x48, 0x45, 0x10,
	0x9f, 0xa9, 0x77, 0x3a, 0x0a, 0xcc, 0xf0, 0x78, 0x08, 0xf7, 0xe7, 0x28, 0xde, 0x04, 0x02, 0xb9,
	0xe8, 0x4c, 0x76, 0xd5, 0x3e, 0x48, 0x0d, 0xa4, 0x45, 0x1e, 0x56, 0xab, 0xa0, 0x2d, 0xa9, 0xe8,
	0x82, 0x63, 0x9e, 0x48, 0x45, 0x97, 0x2b, 0x50, 0xdb, 0x1e, 0x03, 0x7a, 0xf7, 0x9a, 0xa6, 0x5d,
	0xec, 0xb6, 0x5b, 0x3b, 0x4c, 0x7e, 0xed, 0xdf, 0xf1, 0xfb, 0x12, 0xf6, 0x5f, 0x63, 0x8c, 0x02,
	0x3b, 0x9d, 0x94, 0xea, 0xb4, 0x6a, 0x75, 0x6a, 0x36, 0xec, 0x86, 0x8d, 0x19, 0x4c, 0x3a, 0x95,
	0xeb, 0x3c, 0x4e, 0x8a, 0xf2, 0x5a, 0x89, 0xf6, 0xef, 0x44, 0xd9, 0xc1, 0x58, 0x4b, 0x94, 0x33,
	0xb8, 0x37, 0x47, 0xf1, 0xc7, 0x8d, 0x7e, 0x00, 0x62, 0x96, 0xfd, 0x6b, 0x0a, 0x4e, 0x7e, 0x38,
	0x30, 0xf6, 0xcb, 0x6f, 0x6e, 0xf5, 0x5d, 0xbd, 0x84, 0x51, 0x6b, 0xeb, 0xc8, 0xa3, 0xba, 0xbc,
	0x6f, 0xa3, 0xa7, 0x87, 0xab, 0xc2, 0xe5, 0x63, 0xbd, 0x0d, 0x72, 0x05, 0xe3, 0xf6, 0xea, 0x90,
	0xa6, 0xa6, 0x77, 0x53, 0xa7, 0x8f, 0x57, 0xc6, 0x6b, 0xd0, 0xf7, 0xb0, 0xd7, 0x95, 0x28, 0x71,
	0xcd, 0xb2, 0xbe, 0x25, 0x99, 0x3e, 0xf9, 0x45, 0x46, 0x0d, 0x7d, 0x09, 0xa3, 0x16, 0xc5, 0xc6,
	0x04, 0xfa, 0xe4, 0x63, 0x4c, 0xa0, 0x57, 0x19, 0x25, 0x62, 0x4b, 0xaf, 0x06, 0x62, 0xdf, 0x06,
	0x18, 0x88, 0xbd, 0x32, 0xf7, 0x36, 0xc8, 0x1c, 0xa0, 0x11, 0x06, 0x99, 0x9a, 0x6d, 0x75, 0xb0,
	0x1e, 0xf4, 0xc6, 0x2a, 0xa0, 0x4f, 0x5b, 0xea, 0x17, 0xfb, 0xe2, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x41, 0xb7, 0xf5, 0x7d, 0x7b, 0x07, 0x00, 0x00,
}

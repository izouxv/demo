package controller

import (
	"net/http"
	"github.com/julienschmidt/httprouter"
	log "github.com/cihub/seelog"
	"account-domain-http/util"
	"account-domain-http/api"
	"account-domain-http/rpc"
	pb "account-domain-http/api/user/pb"
	"encoding/json"
)

/*
// 基于租户模糊获取资产列表
func GetAssetsForKeywordBaseTenant(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	log.Info("GetAssetsForKeywordBaseTenant...")
	keyword := req.FormValue("keyword")
	if keyword == "" {
		log.Infof("keyword不能为空(%s)",keyword)
		util.JsonReply("Params_error",nil, res)
		return
	}
	count, page, orderBy := util.ReturnCountPageOrderBy(req)
	state, err := util.StringToInt32(req.FormValue("state"))
	tid, err := util.StrToInt64(params.ByName("tid"))
	if err != nil {
		log.Infof("tid有误(%d)",tid)
		util.JsonReply("Params_error",nil, res)
		return
	}
	assetReq := &api.GetAssetsForKeywordBaseTenantRequest{Count: count, Page: page, OrderBy: orderBy, State: api.State(state), Tid: tid,Keyword:keyword}
	log.Debugf("GetAssetsBaseTenantRequest: (%#v)", assetReq)
	assetReply, err := rpc.GetAssetsForKeywordBaseTenant(assetReq)
	if err != nil {
		log.Errorf("调用assert-manager失败err (%s)",err)
		util.JsonReply("System_error",assetReply, res)
		return
	}
	log.Debugf("模糊查询的设备总数(%d)设备列表 %#v:",assetReply.TotalCount,assetReply.Assets)
	util.JsonReply("Successful",assetReply, res)
	return
}
*/

// 基于租户模糊获取资产列表
func GetAssetsForKeywordBaseTenant(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	log.Info("GetAssetsForKeywordBaseTenant...")
	keyword := req.FormValue("keyword")
	if keyword == "" {
		log.Infof("keyword不能为空(%s)",keyword)
		util.JsonReply("Params_error",nil, res)
		return
	}
	count, page, orderBy := util.ReturnCountPageOrderBy(req)
	state, err := util.StringToInt32(req.FormValue("state"))
	tid, err := util.StrToInt64(params.ByName("tid"))
	if err != nil {
		log.Infof("tid有误(%d)",tid)
		util.JsonReply("Params_error",nil, res)
		return
	}
	assetReq := &api.GetAssetsForKeywordMoreBaseTenantRequest{Count: count, Page: page, OrderBy: orderBy, State: api.State(state), Tid: tid,Keyword:keyword}
	log.Debugf("GetAssetsBaseTenantRequest: (%#v)", assetReq)
	assetReply, err := rpc.GetAssetsForKeywordMoreBaseTenant(assetReq)
	if err != nil {
		log.Errorf("调用assert-manager失败err (%s)",err)
		util.JsonReply("System_error",assetReply, res)
		return
	}
	log.Debugf("模糊查询的设备总数(%d)设备列表 %#v:",assetReply.TotalCount,assetReply.Assets)
	util.JsonReply("Successful",assetReply, res)
	return
}


// 基于租户获取资产列表  鹏联管理后台设备的详细信息
func GetAssetsBaseTenant(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	log.Info("GetAssetsBaseTenant...")
	aid, err := util.StrToInt64(params.ByName("aid"))
	if err != nil {
		util.JsonReply("Params_error",nil, res)
		return
	}
	tid, err := util.StrToInt64(params.ByName("tid"))
	if err != nil {
		util.JsonReply("Params_error",nil, res)
		return
	}
	sn := req.FormValue("sn")
	if sn == ""{
		util.JsonReply("Params_error",nil, res)
		return
	}
	deviceInfo := DeviceInfo{}
	var df AutoGenerated
	assetReq := &api.GetTwinsBaseTenantRequest{Tid: tid,Aid:aid}
	log.Debugf("GetTwinsBaseTenantRequest: (%#v)", assetReq)
	twinsReply, err := rpc.GetTwinssBaseTenant(assetReq)
	if err != nil {
		log.Errorf("调用digital-twins失败err (%s)",err)
		deviceInfo.Twins = ""
	}else{
		deviceInfo.Twins = twinsReply.Twins
		if err  := json.Unmarshal([]byte(twinsReply.Twins),&df) ;err != nil {
			log.Info("json格式有误:",err)
			deviceInfo.Twins = ""
		}
		log.Info("deviceInfo.Twins:",deviceInfo.Twins)
	}
    source,ok := util.TidToSource[tid]
    if !ok{
    	log.Infof("tid有误:",tid)
		util.JsonReply("Params_error",nil, res)
		return
	}
	deviceReq := &pb.DeviceRequest{Source:source,Sn:sn}
	device,err := rpc.GetDeviceBaseTenant(deviceReq)
	if err != nil {
		log.Error("调用petfone-rpc失败:",err)
		util.JsonReply("System_error",nil, res)
		return
	}
	log.Debug("调用petfone-rpc返回的设备信息:",device)
	/*df.Pet.Reported.Sn = device.Sn
	df.Pet.Reported.Mac = device.DeviceMac
	df.Pet.Reported.Name = device.DeviceName
	df.Pet.Reported.Source = device.Source
	df.Pet.Reported.SoftWareVersion  = device.SoftwareVersion
	df.Pet.Reported.Version = device.DeviceVersion
	df.Pet.Reported.PID = device.Pid
	df.Pet.Reported.Type = int32(device.Types)
	df.Pet.Reported.Permit = int32(device.Permit)
	df.Pet.Reported.DID = device.Did
*/

	df.State.Reported.Sn = device.Sn
	df.State.Reported.Mac = device.DeviceMac
	df.State.Reported.Name = device.DeviceName
	df.State.Reported.UID = device.Uid

	df.Pet.Reported.SoftWareVersion  = device.SoftwareVersion
	df.Pet.Reported.Version = device.DeviceVersion
	df.Pet.Reported.PID = device.Pid
	df.Pet.Reported.Type = int32(device.Types)
	df.Pet.Reported.Permit = int32(device.Permit)
	df.Pet.Reported.DID = device.Did

	data, _ :=  json.Marshal(df)
	log.Debug("设备数据信息:",string(data))
	deviceInfo.Twins = string(data)
	util.JsonReply("Successful",deviceInfo, res)
	return
}

type DeviceInfo struct {
	Twins      string `json:"twins"`
}

type AutoGenerated struct {
	State struct {
		Reported struct {
			Frequency    string `json:"frequency"`
			Mac          string `json:"mac"`
			Manufacturer string `json:"manufacturer"`
			Md5          string `json:"md5"`
			Model        string `json:"model"`
			Name         string `json:"name"`
			Sn           string `json:"sn"`
			Source       string   `json:"source"`
			UID          int32    `json:"uid"`
			PID          int    `json:"pid"`
			Latitude     float64 `json:"latitude"`
			Longitude    float64 `json:"longitude"`
			NickName     string `json:"nickname"`

		} `json:"reported"`
	} `json:"state"`
	MetaData struct {
		Reported struct {
			Frequency struct {
				Timestamp int `json:"timestamp"`
			} `json:"frequency"`
			Mac struct {
				Timestamp int `json:"timestamp"`
			} `json:"mac"`
			Manufacturer struct {
				Timestamp int `json:"timestamp"`
			} `json:"manufacturer"`
			Md5 struct {
				Timestamp int `json:"timestamp"`
			} `json:"md5"`
			Model struct {
				Timestamp int `json:"timestamp"`
			} `json:"model"`
			Name struct {
				Timestamp int `json:"timestamp"`
			} `json:"name"`
			Sn struct {
				Timestamp int `json:"timestamp"`
			} `json:"sn"`
			Source struct {
				Timestamp int `json:"timestamp"`
			} `json:"source"`
			UID struct {
				Timestamp int `json:"timestamp"`
			} `json:"uid"`
		} `json:"reported"`
	} `json:"meta_data"`
	Pet struct {
		Reported struct {
			Mac          string `json:"mac"`
			Model        string `json:"model"`
			Name         string `json:"name"`
			Sn           string `json:"sn"`
			Source          string `json:"source"`
			UID              int32    `json:"uid"`
			PID               int32    `json:"pid"`
			DID                int32 `json:"did"`
			SoftWareVersion string `json:"softWareVersion"`
			Version         string `json:"version"`
			Permit           int32 `json:"permit"`
			Type             int32 `json:"type"`

		} `json:"reported"`
	} `json:"pet"`
	Timestamp int `json:"timestamp"`
	Version   int `json:"version"`
}

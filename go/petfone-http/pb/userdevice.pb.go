// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/userdevice.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserDeviceRequest struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Did                  int32    `protobuf:"varint,2,opt,name=did,proto3" json:"did,omitempty"`
	Uid                  int32    `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Pid                  int32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Sn                   string   `protobuf:"bytes,5,opt,name=sn,proto3" json:"sn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserDeviceRequest) Reset()         { *m = UserDeviceRequest{} }
func (m *UserDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*UserDeviceRequest) ProtoMessage()    {}
func (*UserDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_userdevice_315817d6af4b37e5, []int{0}
}
func (m *UserDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDeviceRequest.Unmarshal(m, b)
}
func (m *UserDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDeviceRequest.Marshal(b, m, deterministic)
}
func (dst *UserDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeviceRequest.Merge(dst, src)
}
func (m *UserDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_UserDeviceRequest.Size(m)
}
func (m *UserDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeviceRequest proto.InternalMessageInfo

func (m *UserDeviceRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UserDeviceRequest) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

func (m *UserDeviceRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserDeviceRequest) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *UserDeviceRequest) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

type UserDeviceReply struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Did                  int32    `protobuf:"varint,2,opt,name=did,proto3" json:"did,omitempty"`
	Uid                  int32    `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Pid                  int32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Code                 int32    `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Sn                   string   `protobuf:"bytes,6,opt,name=sn,proto3" json:"sn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserDeviceReply) Reset()         { *m = UserDeviceReply{} }
func (m *UserDeviceReply) String() string { return proto.CompactTextString(m) }
func (*UserDeviceReply) ProtoMessage()    {}
func (*UserDeviceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_userdevice_315817d6af4b37e5, []int{1}
}
func (m *UserDeviceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDeviceReply.Unmarshal(m, b)
}
func (m *UserDeviceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDeviceReply.Marshal(b, m, deterministic)
}
func (dst *UserDeviceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeviceReply.Merge(dst, src)
}
func (m *UserDeviceReply) XXX_Size() int {
	return xxx_messageInfo_UserDeviceReply.Size(m)
}
func (m *UserDeviceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeviceReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeviceReply proto.InternalMessageInfo

func (m *UserDeviceReply) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UserDeviceReply) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

func (m *UserDeviceReply) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserDeviceReply) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *UserDeviceReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserDeviceReply) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func init() {
	proto.RegisterType((*UserDeviceRequest)(nil), "pb.UserDeviceRequest")
	proto.RegisterType((*UserDeviceReply)(nil), "pb.UserDeviceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserDeviceClient is the client API for UserDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserDeviceClient interface {
	SetDeviceByUidDid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error)
	DeleteDeviceByDid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error)
	UpdateDeviceByDid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error)
	GetDeviceByUid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error)
}

type userDeviceClient struct {
	cc *grpc.ClientConn
}

func NewUserDeviceClient(cc *grpc.ClientConn) UserDeviceClient {
	return &userDeviceClient{cc}
}

func (c *userDeviceClient) SetDeviceByUidDid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error) {
	out := new(UserDeviceReply)
	err := c.cc.Invoke(ctx, "/pb.UserDevice/SetDeviceByUidDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) DeleteDeviceByDid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error) {
	out := new(UserDeviceReply)
	err := c.cc.Invoke(ctx, "/pb.UserDevice/DeleteDeviceByDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UpdateDeviceByDid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error) {
	out := new(UserDeviceReply)
	err := c.cc.Invoke(ctx, "/pb.UserDevice/UpdateDeviceByDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) GetDeviceByUid(ctx context.Context, in *UserDeviceRequest, opts ...grpc.CallOption) (*UserDeviceReply, error) {
	out := new(UserDeviceReply)
	err := c.cc.Invoke(ctx, "/pb.UserDevice/GetDeviceByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeviceServer is the server API for UserDevice service.
type UserDeviceServer interface {
	SetDeviceByUidDid(context.Context, *UserDeviceRequest) (*UserDeviceReply, error)
	DeleteDeviceByDid(context.Context, *UserDeviceRequest) (*UserDeviceReply, error)
	UpdateDeviceByDid(context.Context, *UserDeviceRequest) (*UserDeviceReply, error)
	GetDeviceByUid(context.Context, *UserDeviceRequest) (*UserDeviceReply, error)
}

func RegisterUserDeviceServer(s *grpc.Server, srv UserDeviceServer) {
	s.RegisterService(&_UserDevice_serviceDesc, srv)
}

func _UserDevice_SetDeviceByUidDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).SetDeviceByUidDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDevice/SetDeviceByUidDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).SetDeviceByUidDid(ctx, req.(*UserDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_DeleteDeviceByDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).DeleteDeviceByDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDevice/DeleteDeviceByDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).DeleteDeviceByDid(ctx, req.(*UserDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UpdateDeviceByDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UpdateDeviceByDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDevice/UpdateDeviceByDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UpdateDeviceByDid(ctx, req.(*UserDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_GetDeviceByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).GetDeviceByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDevice/GetDeviceByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).GetDeviceByUid(ctx, req.(*UserDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserDevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserDevice",
	HandlerType: (*UserDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDeviceByUidDid",
			Handler:    _UserDevice_SetDeviceByUidDid_Handler,
		},
		{
			MethodName: "DeleteDeviceByDid",
			Handler:    _UserDevice_DeleteDeviceByDid_Handler,
		},
		{
			MethodName: "UpdateDeviceByDid",
			Handler:    _UserDevice_UpdateDeviceByDid_Handler,
		},
		{
			MethodName: "GetDeviceByUid",
			Handler:    _UserDevice_GetDeviceByUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/userdevice.proto",
}

func init() { proto.RegisterFile("pb/userdevice.proto", fileDescriptor_userdevice_315817d6af4b37e5) }

var fileDescriptor_userdevice_315817d6af4b37e5 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0xcd, 0xb6, 0x09, 0x38, 0x87, 0x6a, 0xb7, 0x28, 0x8b, 0xa7, 0x92, 0x53, 0x4f, 0x11,
	0xf4, 0x2e, 0x28, 0x01, 0xef, 0x91, 0xfc, 0x00, 0x93, 0x99, 0xc3, 0x42, 0xe8, 0x4e, 0xf7, 0x43,
	0xc8, 0xd9, 0xdf, 0xe0, 0xff, 0x95, 0xec, 0xb6, 0xf8, 0x75, 0x52, 0x7b, 0x9b, 0x79, 0x60, 0x9f,
	0xf7, 0xdd, 0x65, 0x61, 0xc5, 0xdd, 0x75, 0x70, 0x64, 0x91, 0x5e, 0x74, 0x4f, 0x15, 0x5b, 0xe3,
	0x8d, 0x14, 0xdc, 0x95, 0x3b, 0x58, 0xb6, 0x8e, 0x6c, 0x1d, 0x79, 0x43, 0xbb, 0x40, 0xce, 0xcb,
	0x4b, 0x28, 0x9c, 0x09, 0xb6, 0x27, 0x95, 0xad, 0xb3, 0xcd, 0x69, 0xb3, 0xdf, 0xe4, 0x39, 0xcc,
	0x50, 0xa3, 0x12, 0xeb, 0x6c, 0x93, 0x37, 0xd3, 0x38, 0x91, 0xa0, 0x51, 0xcd, 0x12, 0x09, 0x89,
	0xb0, 0x46, 0x35, 0x4f, 0x84, 0x35, 0xca, 0x05, 0x08, 0xb7, 0x55, 0x79, 0x34, 0x09, 0xb7, 0x2d,
	0x5f, 0x33, 0x38, 0xfb, 0x9c, 0xc9, 0xc3, 0x78, 0xe4, 0x44, 0x09, 0xf3, 0xde, 0x20, 0xc5, 0xcc,
	0xbc, 0x89, 0xf3, 0xbe, 0x45, 0x71, 0x68, 0x71, 0xf3, 0x26, 0x00, 0x3e, 0x5a, 0xc8, 0x7b, 0x58,
	0x3e, 0x91, 0x4f, 0xcb, 0xc3, 0xd8, 0x6a, 0xac, 0x35, 0xca, 0x8b, 0x8a, 0xbb, 0xea, 0xc7, 0xf3,
	0x5c, 0xad, 0xbe, 0x63, 0x1e, 0xc6, 0xf2, 0x64, 0x52, 0xd4, 0x34, 0x90, 0xa7, 0x83, 0xe5, 0x4f,
	0x8a, 0x96, 0xf1, 0xf9, 0x3f, 0x8a, 0x3b, 0x58, 0x3c, 0x7e, 0xb9, 0xc8, 0xef, 0xce, 0x77, 0x45,
	0xfc, 0x1b, 0xb7, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x0c, 0x7c, 0x2f, 0x32, 0x02, 0x00,
	0x00,
}

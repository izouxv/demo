// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/share.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShareRequest struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Pids                 []int32  `protobuf:"varint,2,rep,packed,name=pids,proto3" json:"pids,omitempty"`
	OwnerUid             int32    `protobuf:"varint,3,opt,name=ownerUid,proto3" json:"ownerUid,omitempty"`
	MemberUid            int32    `protobuf:"varint,4,opt,name=memberUid,proto3" json:"memberUid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareRequest) Reset()         { *m = ShareRequest{} }
func (m *ShareRequest) String() string { return proto.CompactTextString(m) }
func (*ShareRequest) ProtoMessage()    {}
func (*ShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_share_7ad86bb9b21b3677, []int{0}
}
func (m *ShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareRequest.Unmarshal(m, b)
}
func (m *ShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareRequest.Marshal(b, m, deterministic)
}
func (dst *ShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareRequest.Merge(dst, src)
}
func (m *ShareRequest) XXX_Size() int {
	return xxx_messageInfo_ShareRequest.Size(m)
}
func (m *ShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareRequest proto.InternalMessageInfo

func (m *ShareRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ShareRequest) GetPids() []int32 {
	if m != nil {
		return m.Pids
	}
	return nil
}

func (m *ShareRequest) GetOwnerUid() int32 {
	if m != nil {
		return m.OwnerUid
	}
	return 0
}

func (m *ShareRequest) GetMemberUid() int32 {
	if m != nil {
		return m.MemberUid
	}
	return 0
}

type ShareReply struct {
	Source               string         `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Pid                  int32          `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	OwnerInfo            *AccountReply  `protobuf:"bytes,3,opt,name=ownerInfo,proto3" json:"ownerInfo,omitempty"`
	Members              []*ShareMember `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	Code                 int32          `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShareReply) Reset()         { *m = ShareReply{} }
func (m *ShareReply) String() string { return proto.CompactTextString(m) }
func (*ShareReply) ProtoMessage()    {}
func (*ShareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_share_7ad86bb9b21b3677, []int{1}
}
func (m *ShareReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareReply.Unmarshal(m, b)
}
func (m *ShareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareReply.Marshal(b, m, deterministic)
}
func (dst *ShareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareReply.Merge(dst, src)
}
func (m *ShareReply) XXX_Size() int {
	return xxx_messageInfo_ShareReply.Size(m)
}
func (m *ShareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareReply proto.InternalMessageInfo

func (m *ShareReply) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ShareReply) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ShareReply) GetOwnerInfo() *AccountReply {
	if m != nil {
		return m.OwnerInfo
	}
	return nil
}

func (m *ShareReply) GetMembers() []*ShareMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ShareReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ShareMember struct {
	ShareTime            int64         `protobuf:"varint,1,opt,name=shareTime,proto3" json:"shareTime,omitempty"`
	MemberInfo           *AccountReply `protobuf:"bytes,2,opt,name=memberInfo,proto3" json:"memberInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ShareMember) Reset()         { *m = ShareMember{} }
func (m *ShareMember) String() string { return proto.CompactTextString(m) }
func (*ShareMember) ProtoMessage()    {}
func (*ShareMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_share_7ad86bb9b21b3677, []int{2}
}
func (m *ShareMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareMember.Unmarshal(m, b)
}
func (m *ShareMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareMember.Marshal(b, m, deterministic)
}
func (dst *ShareMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareMember.Merge(dst, src)
}
func (m *ShareMember) XXX_Size() int {
	return xxx_messageInfo_ShareMember.Size(m)
}
func (m *ShareMember) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareMember.DiscardUnknown(m)
}

var xxx_messageInfo_ShareMember proto.InternalMessageInfo

func (m *ShareMember) GetShareTime() int64 {
	if m != nil {
		return m.ShareTime
	}
	return 0
}

func (m *ShareMember) GetMemberInfo() *AccountReply {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

type ShareMapReply struct {
	Shares               map[int32]*ShareReply `protobuf:"bytes,1,rep,name=shares,proto3" json:"shares,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code                 int32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ShareMapReply) Reset()         { *m = ShareMapReply{} }
func (m *ShareMapReply) String() string { return proto.CompactTextString(m) }
func (*ShareMapReply) ProtoMessage()    {}
func (*ShareMapReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_share_7ad86bb9b21b3677, []int{3}
}
func (m *ShareMapReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareMapReply.Unmarshal(m, b)
}
func (m *ShareMapReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareMapReply.Marshal(b, m, deterministic)
}
func (dst *ShareMapReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareMapReply.Merge(dst, src)
}
func (m *ShareMapReply) XXX_Size() int {
	return xxx_messageInfo_ShareMapReply.Size(m)
}
func (m *ShareMapReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareMapReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShareMapReply proto.InternalMessageInfo

func (m *ShareMapReply) GetShares() map[int32]*ShareReply {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *ShareMapReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*ShareRequest)(nil), "pb.ShareRequest")
	proto.RegisterType((*ShareReply)(nil), "pb.ShareReply")
	proto.RegisterType((*ShareMember)(nil), "pb.ShareMember")
	proto.RegisterType((*ShareMapReply)(nil), "pb.ShareMapReply")
	proto.RegisterMapType((map[int32]*ShareReply)(nil), "pb.ShareMapReply.SharesEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShareManageClient is the client API for ShareManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShareManageClient interface {
	SetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error)
	DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error)
	UpdateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error)
	GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareMapReply, error)
	ShareUserResourceByUid(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error)
}

type shareManageClient struct {
	cc *grpc.ClientConn
}

func NewShareManageClient(cc *grpc.ClientConn) ShareManageClient {
	return &shareManageClient{cc}
}

func (c *shareManageClient) SetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error) {
	out := new(ShareReply)
	err := c.cc.Invoke(ctx, "/pb.ShareManage/SetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareManageClient) DeleteShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error) {
	out := new(ShareReply)
	err := c.cc.Invoke(ctx, "/pb.ShareManage/DeleteShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareManageClient) UpdateShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error) {
	out := new(ShareReply)
	err := c.cc.Invoke(ctx, "/pb.ShareManage/UpdateShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareManageClient) GetShare(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareMapReply, error) {
	out := new(ShareMapReply)
	err := c.cc.Invoke(ctx, "/pb.ShareManage/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareManageClient) ShareUserResourceByUid(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareReply, error) {
	out := new(ShareReply)
	err := c.cc.Invoke(ctx, "/pb.ShareManage/ShareUserResourceByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareManageServer is the server API for ShareManage service.
type ShareManageServer interface {
	SetShare(context.Context, *ShareRequest) (*ShareReply, error)
	DeleteShare(context.Context, *ShareRequest) (*ShareReply, error)
	UpdateShare(context.Context, *ShareRequest) (*ShareReply, error)
	GetShare(context.Context, *ShareRequest) (*ShareMapReply, error)
	ShareUserResourceByUid(context.Context, *ShareRequest) (*ShareReply, error)
}

func RegisterShareManageServer(s *grpc.Server, srv ShareManageServer) {
	s.RegisterService(&_ShareManage_serviceDesc, srv)
}

func _ShareManage_SetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareManageServer).SetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShareManage/SetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareManageServer).SetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareManage_DeleteShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareManageServer).DeleteShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShareManage/DeleteShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareManageServer).DeleteShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareManage_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareManageServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShareManage/UpdateShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareManageServer).UpdateShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareManage_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareManageServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShareManage/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareManageServer).GetShare(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareManage_ShareUserResourceByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareManageServer).ShareUserResourceByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShareManage/ShareUserResourceByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareManageServer).ShareUserResourceByUid(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShareManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShareManage",
	HandlerType: (*ShareManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetShare",
			Handler:    _ShareManage_SetShare_Handler,
		},
		{
			MethodName: "DeleteShare",
			Handler:    _ShareManage_DeleteShare_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _ShareManage_UpdateShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _ShareManage_GetShare_Handler,
		},
		{
			MethodName: "ShareUserResourceByUid",
			Handler:    _ShareManage_ShareUserResourceByUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/share.proto",
}

func init() { proto.RegisterFile("pb/share.proto", fileDescriptor_share_7ad86bb9b21b3677) }

var fileDescriptor_share_7ad86bb9b21b3677 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x9b, 0xa4, 0x29, 0xed, 0x04, 0x4a, 0xf0, 0xa1, 0x8a, 0x22, 0x90, 0xa2, 0x88, 0x43,
	0xb8, 0xa4, 0x50, 0x84, 0x84, 0x10, 0x17, 0x10, 0x08, 0xf5, 0xc0, 0xc5, 0xa5, 0x47, 0x0e, 0xf9,
	0x33, 0x40, 0x44, 0x9b, 0x98, 0x38, 0x61, 0x95, 0xf7, 0xd8, 0x57, 0xd8, 0xf7, 0x5c, 0x79, 0x9c,
	0x36, 0xd5, 0xae, 0x2a, 0x6d, 0x6f, 0xe3, 0x99, 0x6f, 0xe6, 0xfb, 0x79, 0x64, 0xc3, 0x5c, 0xa4,
	0x4b, 0xf9, 0x27, 0xa9, 0x31, 0x16, 0x75, 0xd5, 0x54, 0xcc, 0x14, 0xa9, 0xef, 0x8a, 0x74, 0x99,
	0x64, 0x59, 0xd5, 0x96, 0x8d, 0xce, 0x86, 0x0d, 0x3c, 0xde, 0x28, 0x11, 0xc7, 0x7f, 0x2d, 0xca,
	0x86, 0x2d, 0x60, 0x22, 0xab, 0xb6, 0xce, 0xd0, 0x33, 0x02, 0x23, 0x9a, 0xf1, 0xfe, 0xc4, 0x18,
	0x8c, 0x45, 0x91, 0x4b, 0xcf, 0x0c, 0xac, 0xc8, 0xe6, 0x14, 0x33, 0x1f, 0xa6, 0xd5, 0x55, 0x89,
	0xf5, 0xb6, 0xc8, 0x3d, 0x2b, 0x30, 0x22, 0x9b, 0x1f, 0xcf, 0xec, 0x39, 0xcc, 0xf6, 0xb8, 0x4f,
	0x75, 0x71, 0x4c, 0xc5, 0x21, 0x11, 0xde, 0x18, 0x00, 0xbd, 0xad, 0xd8, 0x75, 0x67, 0x4d, 0x5d,
	0xb0, 0x44, 0x91, 0x7b, 0x26, 0xb5, 0xab, 0x90, 0xc5, 0x30, 0x23, 0x8b, 0x75, 0xf9, 0xab, 0x22,
	0x4f, 0x67, 0xe5, 0xc6, 0x22, 0x8d, 0x3f, 0xe9, 0x4b, 0xd1, 0x38, 0x3e, 0x48, 0xd8, 0x2b, 0x78,
	0xa4, 0x5d, 0xa5, 0x37, 0x0e, 0xac, 0xc8, 0x59, 0x3d, 0x55, 0x6a, 0xb2, 0xfe, 0x4e, 0x79, 0x7e,
	0xa8, 0xab, 0x1b, 0x66, 0x55, 0x8e, 0x9e, 0x4d, 0x6e, 0x14, 0x87, 0x3f, 0xc1, 0x39, 0xd1, 0xaa,
	0x4b, 0xd1, 0x46, 0x7f, 0x14, 0x7b, 0x8d, 0x6a, 0xf1, 0x21, 0xc1, 0x5e, 0x03, 0xe8, 0x59, 0x04,
	0x67, 0x9e, 0x81, 0x3b, 0xd1, 0xa8, 0x35, 0x3c, 0xd1, 0xf3, 0x13, 0xa1, 0x37, 0xf1, 0x0e, 0x26,
	0x34, 0x50, 0x7a, 0x06, 0xe1, 0xbe, 0x18, 0x70, 0x7b, 0x89, 0x3e, 0xc9, 0xaf, 0x65, 0x53, 0x77,
	0xbc, 0x17, 0x1f, 0xd9, 0xcd, 0x81, 0xdd, 0x5f, 0xf7, 0xec, 0x5a, 0xaa, 0x76, 0xf9, 0x17, 0x3b,
	0xa2, 0xb6, 0xb9, 0x0a, 0xd9, 0x4b, 0xb0, 0xff, 0x27, 0xbb, 0x16, 0x7b, 0xd4, 0xf9, 0xd1, 0x4a,
	0x83, 0xea, 0xe2, 0x07, 0xf3, 0xbd, 0xb1, 0xba, 0x36, 0x0f, 0x7b, 0x48, 0xca, 0xe4, 0x37, 0xb2,
	0x18, 0xa6, 0x1b, 0x6c, 0x28, 0xc3, 0xdc, 0x93, 0x36, 0x7a, 0x42, 0xfe, 0x9d, 0x41, 0xe1, 0x88,
	0xbd, 0x01, 0xe7, 0x0b, 0xee, 0xb0, 0xc1, 0x8b, 0x5a, 0xb6, 0x22, 0x4f, 0x2e, 0x6b, 0x99, 0x7e,
	0x3b, 0x4f, 0xf5, 0xec, 0xde, 0x26, 0xc3, 0x11, 0xfb, 0x08, 0x0b, 0x4a, 0x6d, 0x25, 0xd6, 0x1c,
	0xf5, 0xab, 0xfb, 0xdc, 0xa9, 0xf7, 0xfb, 0x00, 0xc3, 0x74, 0x42, 0x5f, 0xe8, 0xed, 0x6d, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfe, 0x74, 0xe4, 0x7a, 0x6a, 0x03, 0x00, 0x00,
}

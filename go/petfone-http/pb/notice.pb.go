// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/notice.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NoticeRequest struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Froms                int32    `protobuf:"varint,3,opt,name=froms,proto3" json:"froms,omitempty"`
	Tos                  int32    `protobuf:"varint,4,opt,name=tos,proto3" json:"tos,omitempty"`
	Tou                  string   `protobuf:"bytes,5,opt,name=tou,proto3" json:"tou,omitempty"`
	Nstate               int32    `protobuf:"varint,6,opt,name=nstate,proto3" json:"nstate,omitempty"`
	Types                int32    `protobuf:"varint,7,opt,name=types,proto3" json:"types,omitempty"`
	Info                 string   `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	Times                int64    `protobuf:"varint,9,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeRequest) Reset()         { *m = NoticeRequest{} }
func (m *NoticeRequest) String() string { return proto.CompactTextString(m) }
func (*NoticeRequest) ProtoMessage()    {}
func (*NoticeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_notice_85898a48b55d6078, []int{0}
}
func (m *NoticeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeRequest.Unmarshal(m, b)
}
func (m *NoticeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeRequest.Marshal(b, m, deterministic)
}
func (dst *NoticeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeRequest.Merge(dst, src)
}
func (m *NoticeRequest) XXX_Size() int {
	return xxx_messageInfo_NoticeRequest.Size(m)
}
func (m *NoticeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeRequest proto.InternalMessageInfo

func (m *NoticeRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NoticeRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NoticeRequest) GetFroms() int32 {
	if m != nil {
		return m.Froms
	}
	return 0
}

func (m *NoticeRequest) GetTos() int32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *NoticeRequest) GetTou() string {
	if m != nil {
		return m.Tou
	}
	return ""
}

func (m *NoticeRequest) GetNstate() int32 {
	if m != nil {
		return m.Nstate
	}
	return 0
}

func (m *NoticeRequest) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *NoticeRequest) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *NoticeRequest) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

type NoticeReply struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Froms                int32    `protobuf:"varint,3,opt,name=froms,proto3" json:"froms,omitempty"`
	Tos                  int32    `protobuf:"varint,4,opt,name=tos,proto3" json:"tos,omitempty"`
	Tou                  string   `protobuf:"bytes,5,opt,name=tou,proto3" json:"tou,omitempty"`
	Nstate               int32    `protobuf:"varint,6,opt,name=nstate,proto3" json:"nstate,omitempty"`
	Types                int32    `protobuf:"varint,7,opt,name=types,proto3" json:"types,omitempty"`
	Info                 string   `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	Times                int64    `protobuf:"varint,9,opt,name=times,proto3" json:"times,omitempty"`
	Code                 int32    `protobuf:"varint,10,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeReply) Reset()         { *m = NoticeReply{} }
func (m *NoticeReply) String() string { return proto.CompactTextString(m) }
func (*NoticeReply) ProtoMessage()    {}
func (*NoticeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_notice_85898a48b55d6078, []int{1}
}
func (m *NoticeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeReply.Unmarshal(m, b)
}
func (m *NoticeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeReply.Marshal(b, m, deterministic)
}
func (dst *NoticeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeReply.Merge(dst, src)
}
func (m *NoticeReply) XXX_Size() int {
	return xxx_messageInfo_NoticeReply.Size(m)
}
func (m *NoticeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeReply proto.InternalMessageInfo

func (m *NoticeReply) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NoticeReply) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NoticeReply) GetFroms() int32 {
	if m != nil {
		return m.Froms
	}
	return 0
}

func (m *NoticeReply) GetTos() int32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *NoticeReply) GetTou() string {
	if m != nil {
		return m.Tou
	}
	return ""
}

func (m *NoticeReply) GetNstate() int32 {
	if m != nil {
		return m.Nstate
	}
	return 0
}

func (m *NoticeReply) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *NoticeReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *NoticeReply) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *NoticeReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// 批量请求
type NoticeMapRequest struct {
	Notices              map[int32]*NoticeRequest `protobuf:"bytes,1,rep,name=notices,proto3" json:"notices,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Source               string                   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NoticeMapRequest) Reset()         { *m = NoticeMapRequest{} }
func (m *NoticeMapRequest) String() string { return proto.CompactTextString(m) }
func (*NoticeMapRequest) ProtoMessage()    {}
func (*NoticeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_notice_85898a48b55d6078, []int{2}
}
func (m *NoticeMapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeMapRequest.Unmarshal(m, b)
}
func (m *NoticeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeMapRequest.Marshal(b, m, deterministic)
}
func (dst *NoticeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeMapRequest.Merge(dst, src)
}
func (m *NoticeMapRequest) XXX_Size() int {
	return xxx_messageInfo_NoticeMapRequest.Size(m)
}
func (m *NoticeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeMapRequest proto.InternalMessageInfo

func (m *NoticeMapRequest) GetNotices() map[int32]*NoticeRequest {
	if m != nil {
		return m.Notices
	}
	return nil
}

func (m *NoticeMapRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// 批量返回
type NoticeMapReply struct {
	Notices              map[int32]*NoticeReply `protobuf:"bytes,1,rep,name=notices,proto3" json:"notices,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code                 int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *NoticeMapReply) Reset()         { *m = NoticeMapReply{} }
func (m *NoticeMapReply) String() string { return proto.CompactTextString(m) }
func (*NoticeMapReply) ProtoMessage()    {}
func (*NoticeMapReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_notice_85898a48b55d6078, []int{3}
}
func (m *NoticeMapReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeMapReply.Unmarshal(m, b)
}
func (m *NoticeMapReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeMapReply.Marshal(b, m, deterministic)
}
func (dst *NoticeMapReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeMapReply.Merge(dst, src)
}
func (m *NoticeMapReply) XXX_Size() int {
	return xxx_messageInfo_NoticeMapReply.Size(m)
}
func (m *NoticeMapReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeMapReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeMapReply proto.InternalMessageInfo

func (m *NoticeMapReply) GetNotices() map[int32]*NoticeReply {
	if m != nil {
		return m.Notices
	}
	return nil
}

func (m *NoticeMapReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*NoticeRequest)(nil), "pb.NoticeRequest")
	proto.RegisterType((*NoticeReply)(nil), "pb.NoticeReply")
	proto.RegisterType((*NoticeMapRequest)(nil), "pb.NoticeMapRequest")
	proto.RegisterMapType((map[int32]*NoticeRequest)(nil), "pb.NoticeMapRequest.NoticesEntry")
	proto.RegisterType((*NoticeMapReply)(nil), "pb.NoticeMapReply")
	proto.RegisterMapType((map[int32]*NoticeReply)(nil), "pb.NoticeMapReply.NoticesEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoticeClient interface {
	SetNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeReply, error)
	DeleteNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeReply, error)
	UpdateNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeReply, error)
	GetNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeMapReply, error)
}

type noticeClient struct {
	cc *grpc.ClientConn
}

func NewNoticeClient(cc *grpc.ClientConn) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) SetNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeReply, error) {
	out := new(NoticeReply)
	err := c.cc.Invoke(ctx, "/pb.Notice/SetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) DeleteNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeReply, error) {
	out := new(NoticeReply)
	err := c.cc.Invoke(ctx, "/pb.Notice/DeleteNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) UpdateNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeReply, error) {
	out := new(NoticeReply)
	err := c.cc.Invoke(ctx, "/pb.Notice/UpdateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) GetNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeMapReply, error) {
	out := new(NoticeMapReply)
	err := c.cc.Invoke(ctx, "/pb.Notice/GetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServer is the server API for Notice service.
type NoticeServer interface {
	SetNotice(context.Context, *NoticeRequest) (*NoticeReply, error)
	DeleteNotice(context.Context, *NoticeRequest) (*NoticeReply, error)
	UpdateNotice(context.Context, *NoticeRequest) (*NoticeReply, error)
	GetNotice(context.Context, *NoticeRequest) (*NoticeMapReply, error)
}

func RegisterNoticeServer(s *grpc.Server, srv NoticeServer) {
	s.RegisterService(&_Notice_serviceDesc, srv)
}

func _Notice_SetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/SetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SetNotice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/DeleteNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).DeleteNotice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/UpdateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).UpdateNotice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/GetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).GetNotice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetNotice",
			Handler:    _Notice_SetNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _Notice_DeleteNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _Notice_UpdateNotice_Handler,
		},
		{
			MethodName: "GetNotice",
			Handler:    _Notice_GetNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/notice.proto",
}

func init() { proto.RegisterFile("pb/notice.proto", fileDescriptor_notice_85898a48b55d6078) }

var fileDescriptor_notice_85898a48b55d6078 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0x4b, 0x6e, 0xdb, 0x30,
	0x10, 0x35, 0x25, 0x4b, 0xae, 0xc6, 0xae, 0xed, 0x12, 0x45, 0x41, 0x78, 0x53, 0x55, 0x40, 0x51,
	0xad, 0x5c, 0xd4, 0xed, 0xa2, 0x9f, 0x6d, 0x8b, 0x2e, 0x02, 0x67, 0xa1, 0x20, 0x07, 0x90, 0x2c,
	0x1a, 0x10, 0x22, 0x8b, 0x8c, 0x48, 0x05, 0xd0, 0x9d, 0xb2, 0xce, 0x1d, 0x72, 0x86, 0x20, 0x77,
	0x09, 0x48, 0x4a, 0xb0, 0x22, 0x23, 0x09, 0xbc, 0xcc, 0x6e, 0xde, 0x70, 0xde, 0xcc, 0x9b, 0x37,
	0x20, 0xcc, 0x78, 0xf2, 0xb5, 0x60, 0x32, 0xdb, 0xd0, 0x25, 0x2f, 0x99, 0x64, 0xd8, 0xe2, 0x49,
	0x70, 0x8b, 0xe0, 0xed, 0xa9, 0x4e, 0x46, 0xf4, 0xb2, 0xa2, 0x42, 0xe2, 0x0f, 0xe0, 0x0a, 0x56,
	0x95, 0x1b, 0x4a, 0x90, 0x8f, 0x42, 0x2f, 0x6a, 0x10, 0x9e, 0x82, 0x95, 0xa5, 0xc4, 0xf2, 0x51,
	0xe8, 0x44, 0x56, 0x96, 0xe2, 0xf7, 0xe0, 0x6c, 0x4b, 0xb6, 0x13, 0xc4, 0xd6, 0x29, 0x03, 0xf0,
	0x1c, 0x6c, 0xc9, 0x04, 0x19, 0xea, 0x9c, 0x0a, 0x4d, 0xa6, 0x22, 0x8e, 0x6e, 0xa6, 0x42, 0x35,
	0xa1, 0x10, 0x32, 0x96, 0x94, 0xb8, 0xba, 0xac, 0x41, 0xaa, 0xa3, 0xac, 0x39, 0x15, 0x64, 0x64,
	0x3a, 0x6a, 0x80, 0x31, 0x0c, 0xb3, 0x62, 0xcb, 0xc8, 0x1b, 0xdd, 0x40, 0xc7, 0xba, 0x32, 0xdb,
	0x51, 0x41, 0x3c, 0x1f, 0x85, 0x76, 0x64, 0x40, 0x70, 0x87, 0x60, 0xdc, 0xee, 0xc2, 0xf3, 0xfa,
	0xf5, 0x6e, 0xa2, 0x2a, 0x37, 0x2c, 0xa5, 0x04, 0x34, 0x5d, 0xc7, 0xc1, 0x0d, 0x82, 0xb9, 0xd9,
	0x6e, 0x1d, 0xf3, 0xf6, 0x58, 0x7f, 0x60, 0x64, 0x4e, 0x2a, 0x08, 0xf2, 0xed, 0x70, 0xbc, 0xfa,
	0xb4, 0xe4, 0xc9, 0xb2, 0x5f, 0xd6, 0x24, 0xc4, 0xbf, 0x42, 0x96, 0x75, 0xd4, 0x32, 0x3a, 0xfe,
	0x58, 0x5d, 0x7f, 0x16, 0x6b, 0x98, 0x74, 0x09, 0x6a, 0xef, 0x0b, 0x5a, 0x6b, 0x13, 0x9d, 0x48,
	0x85, 0xf8, 0x0b, 0x38, 0x57, 0x71, 0x5e, 0x19, 0xe2, 0x78, 0xf5, 0x6e, 0x3f, 0xb4, 0x99, 0x18,
	0x99, 0xf7, 0xdf, 0xd6, 0x4f, 0x14, 0x5c, 0x23, 0x98, 0x76, 0x14, 0xa9, 0xcb, 0xfc, 0xea, 0xcb,
	0xfe, 0xd8, 0x93, 0xcd, 0xf3, 0xfa, 0x09, 0xd1, 0xad, 0x35, 0xd6, 0xde, 0x9a, 0xc5, 0xc9, 0x8b,
	0x82, 0x3f, 0x3f, 0x16, 0x3c, 0xeb, 0x0a, 0xe6, 0x79, 0xdd, 0x91, 0xbb, 0xba, 0x47, 0xe0, 0x9a,
	0x27, 0xfc, 0x0d, 0xbc, 0x33, 0x2a, 0x1b, 0x70, 0xb8, 0xe4, 0xa2, 0xdf, 0x26, 0x18, 0xe0, 0x1f,
	0x30, 0xf9, 0x4b, 0x73, 0x2a, 0xe9, 0xb1, 0xac, 0x73, 0x9e, 0xc6, 0x47, 0xb3, 0xbc, 0xff, 0xcf,
	0xc9, 0xc3, 0x87, 0xa6, 0x06, 0x83, 0xc4, 0xd5, 0x9f, 0xff, 0xfb, 0x43, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x53, 0x0f, 0x28, 0x87, 0x0f, 0x04, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: updatedevice.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	updatedevice.proto

It has these top-level messages:
	ReqGetNewGatewayVersion
	GetNewGatewayVersion
	ResGetNewGatewayVersion
	ReqUpdateGatewayVersion
	ResUpdateGatewayVersion
	ReqGetGatewayVersionState
	GatewayVersionState
	ResGetGatewayVersionState
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqGetNewGatewayVersion struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId"`
	GatewayId   string `protobuf:"bytes,2,opt,name=GatewayId" json:"GatewayId"`
	VersionType int32  `protobuf:"varint,3,opt,name=VersionType" json:"VersionType"`
}

func (m *ReqGetNewGatewayVersion) Reset()                    { *m = ReqGetNewGatewayVersion{} }
func (m *ReqGetNewGatewayVersion) String() string            { return proto.CompactTextString(m) }
func (*ReqGetNewGatewayVersion) ProtoMessage()               {}
func (*ReqGetNewGatewayVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqGetNewGatewayVersion) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetNewGatewayVersion) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *ReqGetNewGatewayVersion) GetVersionType() int32 {
	if m != nil {
		return m.VersionType
	}
	return 0
}

type GetNewGatewayVersion struct {
	VersionId          int64  `protobuf:"varint,1,opt,name=VersionId" json:"VersionId"`
	VersionName        string `protobuf:"bytes,2,opt,name=VersionName" json:"VersionName"`
	VersionCode        string `protobuf:"bytes,3,opt,name=VersionCode" json:"VersionCode"`
	VersionDescription string `protobuf:"bytes,4,opt,name=VersionDescription" json:"VersionDescription"`
	VersionTime        int64  `protobuf:"varint,5,opt,name=VersionTime" json:"VersionTime"`
	OldVersion         string `protobuf:"bytes,6,opt,name=OldVersion" json:"OldVersion"`
	Key                int32  `protobuf:"varint,7,opt,name=Key" json:"Key"`
}

func (m *GetNewGatewayVersion) Reset()                    { *m = GetNewGatewayVersion{} }
func (m *GetNewGatewayVersion) String() string            { return proto.CompactTextString(m) }
func (*GetNewGatewayVersion) ProtoMessage()               {}
func (*GetNewGatewayVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetNewGatewayVersion) GetVersionId() int64 {
	if m != nil {
		return m.VersionId
	}
	return 0
}

func (m *GetNewGatewayVersion) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *GetNewGatewayVersion) GetVersionCode() string {
	if m != nil {
		return m.VersionCode
	}
	return ""
}

func (m *GetNewGatewayVersion) GetVersionDescription() string {
	if m != nil {
		return m.VersionDescription
	}
	return ""
}

func (m *GetNewGatewayVersion) GetVersionTime() int64 {
	if m != nil {
		return m.VersionTime
	}
	return 0
}

func (m *GetNewGatewayVersion) GetOldVersion() string {
	if m != nil {
		return m.OldVersion
	}
	return ""
}

func (m *GetNewGatewayVersion) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

type ResGetNewGatewayVersion struct {
	ErrCode           int32                 `protobuf:"varint,1,opt,name=ErrCode" json:"ErrCode"`
	NewGatewayVersion *GetNewGatewayVersion `protobuf:"bytes,2,opt,name=NewGatewayVersion" json:"NewGatewayVersion"`
}

func (m *ResGetNewGatewayVersion) Reset()                    { *m = ResGetNewGatewayVersion{} }
func (m *ResGetNewGatewayVersion) String() string            { return proto.CompactTextString(m) }
func (*ResGetNewGatewayVersion) ProtoMessage()               {}
func (*ResGetNewGatewayVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResGetNewGatewayVersion) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResGetNewGatewayVersion) GetNewGatewayVersion() *GetNewGatewayVersion {
	if m != nil {
		return m.NewGatewayVersion
	}
	return nil
}

type ReqUpdateGatewayVersion struct {
	VersionId int64  `protobuf:"varint,1,opt,name=VersionId" json:"VersionId"`
	UserId    int32  `protobuf:"varint,3,opt,name=UserId" json:"UserId"`
	GatewayId string `protobuf:"bytes,2,opt,name=GatewayId" json:"GatewayId"`
}

func (m *ReqUpdateGatewayVersion) Reset()                    { *m = ReqUpdateGatewayVersion{} }
func (m *ReqUpdateGatewayVersion) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateGatewayVersion) ProtoMessage()               {}
func (*ReqUpdateGatewayVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReqUpdateGatewayVersion) GetVersionId() int64 {
	if m != nil {
		return m.VersionId
	}
	return 0
}

func (m *ReqUpdateGatewayVersion) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateGatewayVersion) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type ResUpdateGatewayVersion struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=ErrCode" json:"ErrCode"`
}

func (m *ResUpdateGatewayVersion) Reset()                    { *m = ResUpdateGatewayVersion{} }
func (m *ResUpdateGatewayVersion) String() string            { return proto.CompactTextString(m) }
func (*ResUpdateGatewayVersion) ProtoMessage()               {}
func (*ResUpdateGatewayVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResUpdateGatewayVersion) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqGetGatewayVersionState struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId"`
	GatewayId   string `protobuf:"bytes,2,opt,name=GatewayId" json:"GatewayId"`
	VersionType int32  `protobuf:"varint,3,opt,name=VersionType" json:"VersionType"`
}

func (m *ReqGetGatewayVersionState) Reset()                    { *m = ReqGetGatewayVersionState{} }
func (m *ReqGetGatewayVersionState) String() string            { return proto.CompactTextString(m) }
func (*ReqGetGatewayVersionState) ProtoMessage()               {}
func (*ReqGetGatewayVersionState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReqGetGatewayVersionState) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetGatewayVersionState) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *ReqGetGatewayVersionState) GetVersionType() int32 {
	if m != nil {
		return m.VersionType
	}
	return 0
}

type GatewayVersionState struct {
	VersionState int32  `protobuf:"varint,1,opt,name=VersionState" json:"VersionState"`
	VersionMsg   string `protobuf:"bytes,2,opt,name=VersionMsg" json:"VersionMsg"`
}

func (m *GatewayVersionState) Reset()                    { *m = GatewayVersionState{} }
func (m *GatewayVersionState) String() string            { return proto.CompactTextString(m) }
func (*GatewayVersionState) ProtoMessage()               {}
func (*GatewayVersionState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GatewayVersionState) GetVersionState() int32 {
	if m != nil {
		return m.VersionState
	}
	return 0
}

func (m *GatewayVersionState) GetVersionMsg() string {
	if m != nil {
		return m.VersionMsg
	}
	return ""
}

type ResGetGatewayVersionState struct {
	VersionSate *GatewayVersionState `protobuf:"bytes,1,opt,name=VersionSate" json:"VersionSate"`
	ErrCode     int32                `protobuf:"varint,2,opt,name=ErrCode" json:"ErrCode"`
}

func (m *ResGetGatewayVersionState) Reset()                    { *m = ResGetGatewayVersionState{} }
func (m *ResGetGatewayVersionState) String() string            { return proto.CompactTextString(m) }
func (*ResGetGatewayVersionState) ProtoMessage()               {}
func (*ResGetGatewayVersionState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResGetGatewayVersionState) GetVersionSate() *GatewayVersionState {
	if m != nil {
		return m.VersionSate
	}
	return nil
}

func (m *ResGetGatewayVersionState) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetNewGatewayVersion)(nil), "pb.ReqGetNewGatewayVersion")
	proto.RegisterType((*GetNewGatewayVersion)(nil), "pb.GetNewGatewayVersion")
	proto.RegisterType((*ResGetNewGatewayVersion)(nil), "pb.ResGetNewGatewayVersion")
	proto.RegisterType((*ReqUpdateGatewayVersion)(nil), "pb.ReqUpdateGatewayVersion")
	proto.RegisterType((*ResUpdateGatewayVersion)(nil), "pb.ResUpdateGatewayVersion")
	proto.RegisterType((*ReqGetGatewayVersionState)(nil), "pb.ReqGetGatewayVersionState")
	proto.RegisterType((*GatewayVersionState)(nil), "pb.GatewayVersionState")
	proto.RegisterType((*ResGetGatewayVersionState)(nil), "pb.ResGetGatewayVersionState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UpdateDevcei service

type UpdateDevceiClient interface {
	// 获取网关的最新版本
	GetNewGatewayVersion(ctx context.Context, in *ReqGetNewGatewayVersion, opts ...grpc.CallOption) (*ResGetNewGatewayVersion, error)
	// post更新网关
	UpdateGatewayVersion(ctx context.Context, in *ReqUpdateGatewayVersion, opts ...grpc.CallOption) (*ResUpdateGatewayVersion, error)
	// 获取网关的状态
	GetGatewayVersionState(ctx context.Context, in *ReqGetGatewayVersionState, opts ...grpc.CallOption) (*ResGetGatewayVersionState, error)
}

type updateDevceiClient struct {
	cc *grpc.ClientConn
}

func NewUpdateDevceiClient(cc *grpc.ClientConn) UpdateDevceiClient {
	return &updateDevceiClient{cc}
}

func (c *updateDevceiClient) GetNewGatewayVersion(ctx context.Context, in *ReqGetNewGatewayVersion, opts ...grpc.CallOption) (*ResGetNewGatewayVersion, error) {
	out := new(ResGetNewGatewayVersion)
	err := grpc.Invoke(ctx, "/pb.UpdateDevcei/GetNewGatewayVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateDevceiClient) UpdateGatewayVersion(ctx context.Context, in *ReqUpdateGatewayVersion, opts ...grpc.CallOption) (*ResUpdateGatewayVersion, error) {
	out := new(ResUpdateGatewayVersion)
	err := grpc.Invoke(ctx, "/pb.UpdateDevcei/UpdateGatewayVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateDevceiClient) GetGatewayVersionState(ctx context.Context, in *ReqGetGatewayVersionState, opts ...grpc.CallOption) (*ResGetGatewayVersionState, error) {
	out := new(ResGetGatewayVersionState)
	err := grpc.Invoke(ctx, "/pb.UpdateDevcei/GetGatewayVersionState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateDevcei service

type UpdateDevceiServer interface {
	// 获取网关的最新版本
	GetNewGatewayVersion(context.Context, *ReqGetNewGatewayVersion) (*ResGetNewGatewayVersion, error)
	// post更新网关
	UpdateGatewayVersion(context.Context, *ReqUpdateGatewayVersion) (*ResUpdateGatewayVersion, error)
	// 获取网关的状态
	GetGatewayVersionState(context.Context, *ReqGetGatewayVersionState) (*ResGetGatewayVersionState, error)
}

func RegisterUpdateDevceiServer(s *grpc.Server, srv UpdateDevceiServer) {
	s.RegisterService(&_UpdateDevcei_serviceDesc, srv)
}

func _UpdateDevcei_GetNewGatewayVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetNewGatewayVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDevceiServer).GetNewGatewayVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpdateDevcei/GetNewGatewayVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDevceiServer).GetNewGatewayVersion(ctx, req.(*ReqGetNewGatewayVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateDevcei_UpdateGatewayVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateGatewayVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDevceiServer).UpdateGatewayVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpdateDevcei/UpdateGatewayVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDevceiServer).UpdateGatewayVersion(ctx, req.(*ReqUpdateGatewayVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateDevcei_GetGatewayVersionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetGatewayVersionState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDevceiServer).GetGatewayVersionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpdateDevcei/GetGatewayVersionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDevceiServer).GetGatewayVersionState(ctx, req.(*ReqGetGatewayVersionState))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateDevcei_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UpdateDevcei",
	HandlerType: (*UpdateDevceiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewGatewayVersion",
			Handler:    _UpdateDevcei_GetNewGatewayVersion_Handler,
		},
		{
			MethodName: "UpdateGatewayVersion",
			Handler:    _UpdateDevcei_UpdateGatewayVersion_Handler,
		},
		{
			MethodName: "GetGatewayVersionState",
			Handler:    _UpdateDevcei_GetGatewayVersionState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updatedevice.proto",
}

func init() { proto.RegisterFile("updatedevice.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0xa5, 0xed, 0x07, 0x84, 0x81, 0xc3, 0xe7, 0x6a, 0x60, 0x45, 0x30, 0x64, 0x4f, 0x9c, 0x7a,
	0x80, 0x93, 0x67, 0x51, 0x42, 0x8c, 0x98, 0x14, 0x31, 0x7a, 0x2c, 0x74, 0x62, 0x9a, 0x08, 0x2d,
	0x6d, 0x85, 0x10, 0xff, 0x84, 0x3f, 0xd8, 0x83, 0xd9, 0xed, 0x42, 0x97, 0xb0, 0x4d, 0xf4, 0xe0,
	0xad, 0xf3, 0x66, 0xf6, 0xbd, 0x99, 0xb7, 0xb3, 0x05, 0xf2, 0x1e, 0x7a, 0x6e, 0x82, 0x1e, 0xae,
	0xfd, 0x39, 0xda, 0x61, 0x14, 0x24, 0x01, 0x31, 0xc3, 0x19, 0x5b, 0x41, 0xc3, 0xc1, 0xd5, 0x10,
	0x93, 0x31, 0x6e, 0x86, 0x6e, 0x82, 0x1b, 0x77, 0xfb, 0x84, 0x51, 0xec, 0x07, 0x4b, 0x52, 0x87,
	0xd2, 0x34, 0xc6, 0x68, 0xe4, 0x51, 0xa3, 0x63, 0x74, 0x8b, 0x8e, 0x8c, 0x48, 0x0b, 0x2a, 0xb2,
	0x72, 0xe4, 0x51, 0xb3, 0x63, 0x74, 0x2b, 0x4e, 0x06, 0x90, 0x0e, 0x54, 0x25, 0xc1, 0xe3, 0x36,
	0x44, 0x6a, 0x89, 0xa3, 0x2a, 0xc4, 0xbe, 0x0c, 0x38, 0xd3, 0x0a, 0xb6, 0xa0, 0x22, 0x3f, 0xa5,
	0xa6, 0xe5, 0x64, 0x80, 0x42, 0x3c, 0x76, 0x17, 0x28, 0x85, 0x55, 0x48, 0xa9, 0xb8, 0x0e, 0xbc,
	0x54, 0x3a, 0xab, 0xe0, 0x10, 0xb1, 0x81, 0xc8, 0x70, 0x80, 0xf1, 0x3c, 0xf2, 0xc3, 0xc4, 0x0f,
	0x96, 0xf4, 0x9f, 0x28, 0xd4, 0x64, 0xd4, 0x61, 0xfc, 0x05, 0xd2, 0xa2, 0xe8, 0x49, 0x85, 0xc8,
	0x25, 0xc0, 0xc3, 0x9b, 0x27, 0x11, 0x5a, 0x12, 0x4c, 0x0a, 0x42, 0xfe, 0x83, 0x75, 0x87, 0x5b,
	0x5a, 0x16, 0x36, 0xf0, 0x4f, 0xf6, 0xc1, 0x1d, 0x8f, 0xb5, 0x06, 0x50, 0x28, 0xdf, 0x44, 0x91,
	0x68, 0x3e, 0xb5, 0x7c, 0x17, 0x92, 0x5b, 0x38, 0x39, 0x2a, 0x17, 0x16, 0x54, 0x7b, 0xd4, 0x0e,
	0x67, 0xb6, 0x8e, 0xce, 0x39, 0x3e, 0xc2, 0x16, 0xe2, 0xba, 0xa7, 0x62, 0x17, 0x7e, 0xe5, 0x7e,
	0xb6, 0x0c, 0xd6, 0xcf, 0x97, 0x81, 0xf5, 0xc5, 0xac, 0x5a, 0xb9, 0xdc, 0x59, 0x59, 0x0c, 0xe7,
	0xe9, 0x4a, 0x1e, 0x9e, 0x98, 0x24, 0x6e, 0x82, 0x7f, 0xb6, 0x94, 0x2f, 0x70, 0xaa, 0x93, 0x63,
	0x50, 0x53, 0x63, 0x29, 0x7a, 0x80, 0xf1, 0x15, 0x90, 0xf1, 0x7d, 0xfc, 0x2a, 0xb5, 0x15, 0x84,
	0x85, 0x7c, 0x9e, 0x38, 0x67, 0x9e, 0xab, 0x7d, 0x67, 0x93, 0x1d, 0x7f, 0xb5, 0xd7, 0x10, 0x57,
	0x7a, 0x5c, 0xed, 0xa8, 0xb5, 0xaa, 0x83, 0xe6, 0x81, 0x83, 0xbd, 0x4f, 0x13, 0x6a, 0xa9, 0xe9,
	0x03, 0x5c, 0xcf, 0xd1, 0x27, 0x4e, 0xce, 0x8b, 0xbb, 0xe0, 0x42, 0x39, 0xef, 0xbf, 0x29, 0x93,
	0xda, 0x55, 0x65, 0x05, 0xce, 0xa9, 0xbd, 0xd8, 0x1d, 0xa7, 0x2e, 0xb9, 0xe7, 0xd4, 0x25, 0x59,
	0x81, 0x3c, 0x43, 0x3d, 0xc7, 0xa7, 0x76, 0xd6, 0xa9, 0x26, 0xdd, 0x6c, 0x67, 0xbd, 0x6a, 0xd2,
	0xac, 0x30, 0x2b, 0x89, 0x5f, 0x5e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x70, 0xe1, 0x01,
	0x08, 0x05, 0x00, 0x00,
}

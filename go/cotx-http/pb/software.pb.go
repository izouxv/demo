// Code generated by protoc-gen-go. DO NOT EDIT.
// source: software.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Software struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	DeviceType           string   `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type"`
	VersionCode          string   `protobuf:"bytes,3,opt,name=version_code,json=versionCode,proto3" json:"version_code"`
	VersionName          string   `protobuf:"bytes,4,opt,name=version_name,json=versionName,proto3" json:"version_name"`
	ChineseDescribe      string   `protobuf:"bytes,5,opt,name=chinese_describe,json=chineseDescribe,proto3" json:"chinese_describe"`
	VersionTime          int64    `protobuf:"varint,6,opt,name=version_time,json=versionTime,proto3" json:"version_time"`
	DeviceUse            int32    `protobuf:"varint,7,opt,name=device_use,json=deviceUse,proto3" json:"device_use"`
	PhotoUrl             string   `protobuf:"bytes,8,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Software) Reset()         { *m = Software{} }
func (m *Software) String() string { return proto.CompactTextString(m) }
func (*Software) ProtoMessage()    {}
func (*Software) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{0}
}
func (m *Software) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Software.Unmarshal(m, b)
}
func (m *Software) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Software.Marshal(b, m, deterministic)
}
func (dst *Software) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Software.Merge(dst, src)
}
func (m *Software) XXX_Size() int {
	return xxx_messageInfo_Software.Size(m)
}
func (m *Software) XXX_DiscardUnknown() {
	xxx_messageInfo_Software.DiscardUnknown(m)
}

var xxx_messageInfo_Software proto.InternalMessageInfo

func (m *Software) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Software) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Software) GetVersionCode() string {
	if m != nil {
		return m.VersionCode
	}
	return ""
}

func (m *Software) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *Software) GetChineseDescribe() string {
	if m != nil {
		return m.ChineseDescribe
	}
	return ""
}

func (m *Software) GetVersionTime() int64 {
	if m != nil {
		return m.VersionTime
	}
	return 0
}

func (m *Software) GetDeviceUse() int32 {
	if m != nil {
		return m.DeviceUse
	}
	return 0
}

func (m *Software) GetPhotoUrl() string {
	if m != nil {
		return m.PhotoUrl
	}
	return ""
}

type GetSoftwareByVersionTypeRequest struct {
	SoftwareType         int32    `protobuf:"varint,1,opt,name=software_type,json=softwareType,proto3" json:"software_type"`
	GatewayId            string   `protobuf:"bytes,2,opt,name=gatewayId,proto3" json:"gatewayId"`
	UserId               int32    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId"`
	Page                 int32    `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Count                int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSoftwareByVersionTypeRequest) Reset()         { *m = GetSoftwareByVersionTypeRequest{} }
func (m *GetSoftwareByVersionTypeRequest) String() string { return proto.CompactTextString(m) }
func (*GetSoftwareByVersionTypeRequest) ProtoMessage()    {}
func (*GetSoftwareByVersionTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{1}
}
func (m *GetSoftwareByVersionTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSoftwareByVersionTypeRequest.Unmarshal(m, b)
}
func (m *GetSoftwareByVersionTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSoftwareByVersionTypeRequest.Marshal(b, m, deterministic)
}
func (dst *GetSoftwareByVersionTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSoftwareByVersionTypeRequest.Merge(dst, src)
}
func (m *GetSoftwareByVersionTypeRequest) XXX_Size() int {
	return xxx_messageInfo_GetSoftwareByVersionTypeRequest.Size(m)
}
func (m *GetSoftwareByVersionTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSoftwareByVersionTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSoftwareByVersionTypeRequest proto.InternalMessageInfo

func (m *GetSoftwareByVersionTypeRequest) GetSoftwareType() int32 {
	if m != nil {
		return m.SoftwareType
	}
	return 0
}

func (m *GetSoftwareByVersionTypeRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *GetSoftwareByVersionTypeRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSoftwareByVersionTypeRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetSoftwareByVersionTypeRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetSoftwareByVersionTypeRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type GetSoftwareByVersionTypeResponse struct {
	Softwares            []*Software `protobuf:"bytes,1,rep,name=softwares,proto3" json:"softwares"`
	Total                int32       `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	ErrCode              int32       `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetSoftwareByVersionTypeResponse) Reset()         { *m = GetSoftwareByVersionTypeResponse{} }
func (m *GetSoftwareByVersionTypeResponse) String() string { return proto.CompactTextString(m) }
func (*GetSoftwareByVersionTypeResponse) ProtoMessage()    {}
func (*GetSoftwareByVersionTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{2}
}
func (m *GetSoftwareByVersionTypeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSoftwareByVersionTypeResponse.Unmarshal(m, b)
}
func (m *GetSoftwareByVersionTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSoftwareByVersionTypeResponse.Marshal(b, m, deterministic)
}
func (dst *GetSoftwareByVersionTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSoftwareByVersionTypeResponse.Merge(dst, src)
}
func (m *GetSoftwareByVersionTypeResponse) XXX_Size() int {
	return xxx_messageInfo_GetSoftwareByVersionTypeResponse.Size(m)
}
func (m *GetSoftwareByVersionTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSoftwareByVersionTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSoftwareByVersionTypeResponse proto.InternalMessageInfo

func (m *GetSoftwareByVersionTypeResponse) GetSoftwares() []*Software {
	if m != nil {
		return m.Softwares
	}
	return nil
}

func (m *GetSoftwareByVersionTypeResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetSoftwareByVersionTypeResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type InstallSoftwareRequest struct {
	SoftwareType         int32    `protobuf:"varint,1,opt,name=software_type,json=softwareType,proto3" json:"software_type"`
	GatewayId            string   `protobuf:"bytes,2,opt,name=gatewayId,proto3" json:"gatewayId"`
	UserId               int32    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId"`
	Id                   int64    `protobuf:"varint,6,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallSoftwareRequest) Reset()         { *m = InstallSoftwareRequest{} }
func (m *InstallSoftwareRequest) String() string { return proto.CompactTextString(m) }
func (*InstallSoftwareRequest) ProtoMessage()    {}
func (*InstallSoftwareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{3}
}
func (m *InstallSoftwareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSoftwareRequest.Unmarshal(m, b)
}
func (m *InstallSoftwareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSoftwareRequest.Marshal(b, m, deterministic)
}
func (dst *InstallSoftwareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSoftwareRequest.Merge(dst, src)
}
func (m *InstallSoftwareRequest) XXX_Size() int {
	return xxx_messageInfo_InstallSoftwareRequest.Size(m)
}
func (m *InstallSoftwareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSoftwareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSoftwareRequest proto.InternalMessageInfo

func (m *InstallSoftwareRequest) GetSoftwareType() int32 {
	if m != nil {
		return m.SoftwareType
	}
	return 0
}

func (m *InstallSoftwareRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *InstallSoftwareRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InstallSoftwareRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type InstallSoftwareResponse struct {
	ErrCode              int32     `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode"`
	Software             *Software `protobuf:"bytes,2,opt,name=Software,proto3" json:"Software"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InstallSoftwareResponse) Reset()         { *m = InstallSoftwareResponse{} }
func (m *InstallSoftwareResponse) String() string { return proto.CompactTextString(m) }
func (*InstallSoftwareResponse) ProtoMessage()    {}
func (*InstallSoftwareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{4}
}
func (m *InstallSoftwareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSoftwareResponse.Unmarshal(m, b)
}
func (m *InstallSoftwareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSoftwareResponse.Marshal(b, m, deterministic)
}
func (dst *InstallSoftwareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSoftwareResponse.Merge(dst, src)
}
func (m *InstallSoftwareResponse) XXX_Size() int {
	return xxx_messageInfo_InstallSoftwareResponse.Size(m)
}
func (m *InstallSoftwareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSoftwareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSoftwareResponse proto.InternalMessageInfo

func (m *InstallSoftwareResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *InstallSoftwareResponse) GetSoftware() *Software {
	if m != nil {
		return m.Software
	}
	return nil
}

type GetSoftwareByIdRequest struct {
	VersionType          int32    `protobuf:"varint,1,opt,name=version_type,json=versionType,proto3" json:"version_type"`
	GatewayId            string   `protobuf:"bytes,2,opt,name=gatewayId,proto3" json:"gatewayId"`
	UserId               int32    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId"`
	VersionCode          string   `protobuf:"bytes,4,opt,name=version_code,json=versionCode,proto3" json:"version_code"`
	VersionName          string   `protobuf:"bytes,5,opt,name=version_name,json=versionName,proto3" json:"version_name"`
	Id                   int64    `protobuf:"varint,6,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSoftwareByIdRequest) Reset()         { *m = GetSoftwareByIdRequest{} }
func (m *GetSoftwareByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetSoftwareByIdRequest) ProtoMessage()    {}
func (*GetSoftwareByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{5}
}
func (m *GetSoftwareByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSoftwareByIdRequest.Unmarshal(m, b)
}
func (m *GetSoftwareByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSoftwareByIdRequest.Marshal(b, m, deterministic)
}
func (dst *GetSoftwareByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSoftwareByIdRequest.Merge(dst, src)
}
func (m *GetSoftwareByIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetSoftwareByIdRequest.Size(m)
}
func (m *GetSoftwareByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSoftwareByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSoftwareByIdRequest proto.InternalMessageInfo

func (m *GetSoftwareByIdRequest) GetVersionType() int32 {
	if m != nil {
		return m.VersionType
	}
	return 0
}

func (m *GetSoftwareByIdRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *GetSoftwareByIdRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetSoftwareByIdRequest) GetVersionCode() string {
	if m != nil {
		return m.VersionCode
	}
	return ""
}

func (m *GetSoftwareByIdRequest) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *GetSoftwareByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetSoftwareByIdResponse struct {
	ErrCode              int32     `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode"`
	Software             *Software `protobuf:"bytes,2,opt,name=Software,proto3" json:"Software"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetSoftwareByIdResponse) Reset()         { *m = GetSoftwareByIdResponse{} }
func (m *GetSoftwareByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetSoftwareByIdResponse) ProtoMessage()    {}
func (*GetSoftwareByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_software_2f044bbc07a386a4, []int{6}
}
func (m *GetSoftwareByIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSoftwareByIdResponse.Unmarshal(m, b)
}
func (m *GetSoftwareByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSoftwareByIdResponse.Marshal(b, m, deterministic)
}
func (dst *GetSoftwareByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSoftwareByIdResponse.Merge(dst, src)
}
func (m *GetSoftwareByIdResponse) XXX_Size() int {
	return xxx_messageInfo_GetSoftwareByIdResponse.Size(m)
}
func (m *GetSoftwareByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSoftwareByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSoftwareByIdResponse proto.InternalMessageInfo

func (m *GetSoftwareByIdResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetSoftwareByIdResponse) GetSoftware() *Software {
	if m != nil {
		return m.Software
	}
	return nil
}

func init() {
	proto.RegisterType((*Software)(nil), "pb.Software")
	proto.RegisterType((*GetSoftwareByVersionTypeRequest)(nil), "pb.GetSoftwareByVersionTypeRequest")
	proto.RegisterType((*GetSoftwareByVersionTypeResponse)(nil), "pb.GetSoftwareByVersionTypeResponse")
	proto.RegisterType((*InstallSoftwareRequest)(nil), "pb.InstallSoftwareRequest")
	proto.RegisterType((*InstallSoftwareResponse)(nil), "pb.InstallSoftwareResponse")
	proto.RegisterType((*GetSoftwareByIdRequest)(nil), "pb.GetSoftwareByIdRequest")
	proto.RegisterType((*GetSoftwareByIdResponse)(nil), "pb.GetSoftwareByIdResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SoftwareServiceClient is the client API for SoftwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SoftwareServiceClient interface {
	// 基于网关id,软件类型获取软件 分页获取
	GetSoftwareByVersionType(ctx context.Context, in *GetSoftwareByVersionTypeRequest, opts ...grpc.CallOption) (*GetSoftwareByVersionTypeResponse, error)
	// 基于网关id,软件类型，软件版本下发设置
	InstallSoftware(ctx context.Context, in *InstallSoftwareRequest, opts ...grpc.CallOption) (*InstallSoftwareResponse, error)
	// 基于软件id获取软件详细信息
	GetSoftwareById(ctx context.Context, in *GetSoftwareByIdRequest, opts ...grpc.CallOption) (*GetSoftwareByIdResponse, error)
}

type softwareServiceClient struct {
	cc *grpc.ClientConn
}

func NewSoftwareServiceClient(cc *grpc.ClientConn) SoftwareServiceClient {
	return &softwareServiceClient{cc}
}

func (c *softwareServiceClient) GetSoftwareByVersionType(ctx context.Context, in *GetSoftwareByVersionTypeRequest, opts ...grpc.CallOption) (*GetSoftwareByVersionTypeResponse, error) {
	out := new(GetSoftwareByVersionTypeResponse)
	err := grpc.Invoke(ctx, "/pb.SoftwareService/GetSoftwareByVersionType", in, out,c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareServiceClient) InstallSoftware(ctx context.Context, in *InstallSoftwareRequest, opts ...grpc.CallOption) (*InstallSoftwareResponse, error) {
	out := new(InstallSoftwareResponse)
	err := grpc.Invoke(ctx, "/pb.SoftwareService/InstallSoftware", in, out,c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareServiceClient) GetSoftwareById(ctx context.Context, in *GetSoftwareByIdRequest, opts ...grpc.CallOption) (*GetSoftwareByIdResponse, error) {
	out := new(GetSoftwareByIdResponse)
	err := grpc.Invoke(ctx, "/pb.SoftwareService/GetSoftwareById", in, out,c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftwareServiceServer is the server API for SoftwareService service.
type SoftwareServiceServer interface {
	// 基于网关id,软件类型获取软件 分页获取
	GetSoftwareByVersionType(context.Context, *GetSoftwareByVersionTypeRequest) (*GetSoftwareByVersionTypeResponse, error)
	// 基于网关id,软件类型，软件版本下发设置
	InstallSoftware(context.Context, *InstallSoftwareRequest) (*InstallSoftwareResponse, error)
	// 基于软件id获取软件详细信息
	GetSoftwareById(context.Context, *GetSoftwareByIdRequest) (*GetSoftwareByIdResponse, error)
}

func RegisterSoftwareServiceServer(s *grpc.Server, srv SoftwareServiceServer) {
	s.RegisterService(&_SoftwareService_serviceDesc, srv)
}

func _SoftwareService_GetSoftwareByVersionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByVersionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServiceServer).GetSoftwareByVersionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SoftwareService/GetSoftwareByVersionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServiceServer).GetSoftwareByVersionType(ctx, req.(*GetSoftwareByVersionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareService_InstallSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSoftwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServiceServer).InstallSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SoftwareService/InstallSoftware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServiceServer).InstallSoftware(ctx, req.(*InstallSoftwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareService_GetSoftwareById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServiceServer).GetSoftwareById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SoftwareService/GetSoftwareById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServiceServer).GetSoftwareById(ctx, req.(*GetSoftwareByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SoftwareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SoftwareService",
	HandlerType: (*SoftwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSoftwareByVersionType",
			Handler:    _SoftwareService_GetSoftwareByVersionType_Handler,
		},
		{
			MethodName: "InstallSoftware",
			Handler:    _SoftwareService_InstallSoftware_Handler,
		},
		{
			MethodName: "GetSoftwareById",
			Handler:    _SoftwareService_GetSoftwareById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "software.proto",
}

func init() { proto.RegisterFile("software.proto", fileDescriptor_software_2f044bbc07a386a4) }

var fileDescriptor_software_2f044bbc07a386a4 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x6b, 0x27, 0x4e, 0xe2, 0x49, 0x68, 0xd0, 0x08, 0x85, 0x25, 0x05, 0x35, 0xb8, 0x1c,
	0x02, 0x87, 0x1c, 0xca, 0x1b, 0x14, 0x24, 0x14, 0x09, 0x71, 0x70, 0x5b, 0x6e, 0xc8, 0x72, 0xe2,
	0x21, 0xb5, 0x94, 0x78, 0xcd, 0xee, 0xa6, 0x95, 0x2f, 0x5c, 0x38, 0x72, 0xe7, 0x7d, 0x38, 0xf1,
	0x5a, 0x28, 0xeb, 0xdd, 0xfc, 0x0f, 0x95, 0x10, 0xdc, 0x32, 0xdf, 0xce, 0xce, 0x7e, 0xf3, 0xcb,
	0x8c, 0xe1, 0x58, 0xf2, 0xcf, 0xea, 0x2e, 0x16, 0x34, 0xc8, 0x05, 0x57, 0x1c, 0xdd, 0x7c, 0x14,
	0x7c, 0x77, 0xa1, 0x71, 0x69, 0x64, 0x3c, 0x06, 0x37, 0x4d, 0x98, 0xd3, 0x73, 0xfa, 0x95, 0xd0,
	0x4d, 0x13, 0x3c, 0x85, 0x66, 0x42, 0xb7, 0xe9, 0x98, 0x22, 0x55, 0xe4, 0xc4, 0xdc, 0x9e, 0xd3,
	0xf7, 0x43, 0x28, 0xa5, 0xab, 0x22, 0x27, 0x7c, 0x0e, 0xad, 0x5b, 0x12, 0x32, 0xe5, 0x59, 0x34,
	0xe6, 0x09, 0xb1, 0x8a, 0xce, 0x68, 0x1a, 0xed, 0x0d, 0x4f, 0x36, 0x52, 0xb2, 0x78, 0x46, 0xac,
	0xba, 0x91, 0xf2, 0x21, 0x9e, 0x11, 0xbe, 0x84, 0x87, 0xe3, 0x9b, 0x34, 0x23, 0x49, 0x51, 0x42,
	0x72, 0x2c, 0xd2, 0x11, 0x31, 0x4f, 0xa7, 0xb5, 0x8d, 0xfe, 0xd6, 0xc8, 0xeb, 0xd5, 0x54, 0x3a,
	0x23, 0x56, 0xd3, 0x5e, 0x6d, 0xb5, 0xab, 0x74, 0x46, 0xf8, 0x0c, 0x8c, 0xc3, 0x68, 0x2e, 0x89,
	0xd5, 0x7b, 0x4e, 0xdf, 0x0b, 0xfd, 0x52, 0xb9, 0x96, 0x84, 0x27, 0xe0, 0xe7, 0x37, 0x5c, 0xf1,
	0x68, 0x2e, 0xa6, 0xac, 0xa1, 0x5f, 0x69, 0x68, 0xe1, 0x5a, 0x4c, 0x83, 0x9f, 0x0e, 0x9c, 0xbe,
	0x23, 0x65, 0x81, 0x5c, 0x14, 0x1f, 0x4d, 0xe1, 0x22, 0xa7, 0x90, 0xbe, 0xcc, 0x49, 0x2a, 0x3c,
	0x83, 0x07, 0x96, 0x63, 0x89, 0xc5, 0xd1, 0x4f, 0xb4, 0xac, 0xa8, 0xc1, 0x3c, 0x05, 0x7f, 0x12,
	0x2b, 0xba, 0x8b, 0x8b, 0x61, 0x62, 0xb8, 0xad, 0x04, 0xec, 0x40, 0x6d, 0x2e, 0x49, 0x0c, 0x13,
	0x0d, 0xcc, 0x0b, 0x4d, 0x84, 0x08, 0xd5, 0x3c, 0x9e, 0x94, 0x8c, 0xbc, 0x50, 0xff, 0xc6, 0x47,
	0xe0, 0x8d, 0xf9, 0x3c, 0x53, 0x9a, 0x88, 0x17, 0x96, 0x01, 0x3e, 0x81, 0x06, 0x17, 0x09, 0x89,
	0x68, 0x54, 0x68, 0x06, 0x7e, 0x58, 0xd7, 0xf1, 0x45, 0x11, 0x7c, 0x85, 0xde, 0xe1, 0x16, 0x64,
	0xce, 0x33, 0x49, 0xf8, 0x0a, 0x7c, 0x6b, 0x57, 0x32, 0xa7, 0x57, 0xe9, 0x37, 0xcf, 0x5b, 0x83,
	0x7c, 0x34, 0xb0, 0xb7, 0xc2, 0xd5, 0xf1, 0xc2, 0x80, 0xe2, 0x2a, 0x9e, 0x1a, 0xaf, 0x65, 0x80,
	0x0c, 0xea, 0x24, 0xc4, 0xe2, 0x1f, 0xd6, 0xed, 0x79, 0xa1, 0x0d, 0x83, 0x6f, 0x0e, 0x74, 0x86,
	0x99, 0x54, 0xf1, 0x74, 0xba, 0x2c, 0xf7, 0xff, 0xd1, 0x95, 0xa3, 0x5b, 0xb3, 0xa3, 0x1b, 0x7c,
	0x82, 0xc7, 0x3b, 0x26, 0x4c, 0xf3, 0x6b, 0xd6, 0x9d, 0x0d, 0xeb, 0xd8, 0x5f, 0xed, 0x82, 0x7e,
	0x79, 0x9b, 0xca, 0xf2, 0x34, 0xf8, 0xe5, 0x40, 0x67, 0x83, 0xf2, 0x30, 0xb1, 0x4d, 0xae, 0x8f,
	0xe8, 0xaa, 0xc7, 0xe5, 0x88, 0xfe, 0x7d, 0x8b, 0xdb, 0xcb, 0x56, 0xbd, 0x7f, 0xd9, 0xbc, 0xdd,
	0x65, 0xdb, 0x03, 0x6a, 0xa7, 0x91, 0x7f, 0x07, 0xea, 0xfc, 0x87, 0x0b, 0x6d, 0x1b, 0x5c, 0x92,
	0x58, 0x6c, 0x21, 0x4e, 0x80, 0x1d, 0x9a, 0x50, 0x3c, 0x5b, 0xd4, 0xb9, 0x67, 0x05, 0xbb, 0x2f,
	0xfe, 0x9c, 0x54, 0xda, 0x0f, 0x8e, 0xf0, 0x3d, 0xb4, 0xb7, 0x86, 0x00, 0xbb, 0x8b, 0xab, 0xfb,
	0xc7, 0xb3, 0x7b, 0xb2, 0xf7, 0x6c, 0xbd, 0xda, 0x16, 0xa9, 0xb2, 0xda, 0xfe, 0x39, 0x28, 0xab,
	0x1d, 0x40, 0x1b, 0x1c, 0x8d, 0x6a, 0xfa, 0x1b, 0xfc, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1e, 0x46, 0xd8, 0xd7, 0x95, 0x05, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sso.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SsoRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	SessionName string `protobuf:"bytes,3,opt,name=sessionName" json:"sessionName,omitempty"`
	Salt        string `protobuf:"bytes,4,opt,name=salt" json:"salt,omitempty"`
	Uid         int32  `protobuf:"varint,5,opt,name=uid" json:"uid,omitempty"`
	State       int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Exptime     int32  `protobuf:"varint,7,opt,name=exptime" json:"exptime,omitempty"`
	Nickname    string `protobuf:"bytes,8,opt,name=nickname" json:"nickname,omitempty"`
	Token       string `protobuf:"bytes,9,opt,name=token" json:"token,omitempty"`
	Code        string `protobuf:"bytes,10,opt,name=code" json:"code,omitempty"`
	CodeType    int32  `protobuf:"varint,11,opt,name=codeType" json:"codeType,omitempty"`
	Source      string `protobuf:"bytes,12,opt,name=source" json:"source,omitempty"`
}

func (m *SsoRequest) Reset()                    { *m = SsoRequest{} }
func (m *SsoRequest) String() string            { return proto.CompactTextString(m) }
func (*SsoRequest) ProtoMessage()               {}
func (*SsoRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *SsoRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SsoRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SsoRequest) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *SsoRequest) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *SsoRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SsoRequest) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SsoRequest) GetExptime() int32 {
	if m != nil {
		return m.Exptime
	}
	return 0
}

func (m *SsoRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SsoRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SsoRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SsoRequest) GetCodeType() int32 {
	if m != nil {
		return m.CodeType
	}
	return 0
}

func (m *SsoRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// The response message containing the greetings
type SsoReply struct {
	Uid         int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	LoginState  int32  `protobuf:"varint,3,opt,name=loginState" json:"loginState,omitempty"`
	State       int32  `protobuf:"varint,4,opt,name=state" json:"state,omitempty"`
	ErrorCode   int32  `protobuf:"varint,5,opt,name=errorCode" json:"errorCode,omitempty"`
	SessionName string `protobuf:"bytes,6,opt,name=sessionName" json:"sessionName,omitempty"`
	Nickname    string `protobuf:"bytes,7,opt,name=nickname" json:"nickname,omitempty"`
	Token       string `protobuf:"bytes,8,opt,name=token" json:"token,omitempty"`
}

func (m *SsoReply) Reset()                    { *m = SsoReply{} }
func (m *SsoReply) String() string            { return proto.CompactTextString(m) }
func (*SsoReply) ProtoMessage()               {}
func (*SsoReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *SsoReply) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SsoReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SsoReply) GetLoginState() int32 {
	if m != nil {
		return m.LoginState
	}
	return 0
}

func (m *SsoReply) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SsoReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SsoReply) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *SsoReply) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SsoReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type MultiSsoRequest struct {
	Ssos   map[int32]*SsoRequest `protobuf:"bytes,1,rep,name=ssos" json:"ssos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source string                `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *MultiSsoRequest) Reset()                    { *m = MultiSsoRequest{} }
func (m *MultiSsoRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiSsoRequest) ProtoMessage()               {}
func (*MultiSsoRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *MultiSsoRequest) GetSsos() map[int32]*SsoRequest {
	if m != nil {
		return m.Ssos
	}
	return nil
}

func (m *MultiSsoRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type MapSsoReply struct {
	Ssos      map[int32]*SsoReply `protobuf:"bytes,1,rep,name=ssos" json:"ssos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorCode int32               `protobuf:"varint,2,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *MapSsoReply) Reset()                    { *m = MapSsoReply{} }
func (m *MapSsoReply) String() string            { return proto.CompactTextString(m) }
func (*MapSsoReply) ProtoMessage()               {}
func (*MapSsoReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *MapSsoReply) GetSsos() map[int32]*SsoReply {
	if m != nil {
		return m.Ssos
	}
	return nil
}

func (m *MapSsoReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*SsoRequest)(nil), "pb.SsoRequest")
	proto.RegisterType((*SsoReply)(nil), "pb.SsoReply")
	proto.RegisterType((*MultiSsoRequest)(nil), "pb.MultiSsoRequest")
	proto.RegisterType((*MapSsoReply)(nil), "pb.MapSsoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sso service

type SsoClient interface {
	UpdateRedis(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	JudgeUsername(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	GetUserInfo(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	Login(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	GetUserByName(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	Add(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	CheckPassword(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	UpdatePassword(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	Logout(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	UpdatePasswordByName(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	FindPasswordByMail(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	ResetPassword(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	UpdateState(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	GetBatchSsoInfos(ctx context.Context, in *MultiSsoRequest, opts ...grpc.CallOption) (*MapSsoReply, error)
	CheckCode(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	ResetPasswordByPhone(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
	SendMobileCode(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error)
}

type ssoClient struct {
	cc *grpc.ClientConn
}

func NewSsoClient(cc *grpc.ClientConn) SsoClient {
	return &ssoClient{cc}
}

func (c *ssoClient) UpdateRedis(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/UpdateRedis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) JudgeUsername(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/JudgeUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetUserInfo(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) Login(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetUserByName(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/GetUserByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) Add(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) CheckPassword(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/CheckPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) UpdatePassword(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/UpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) Logout(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) UpdatePasswordByName(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/UpdatePasswordByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) FindPasswordByMail(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/FindPasswordByMail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) ResetPassword(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) UpdateState(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/UpdateState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetBatchSsoInfos(ctx context.Context, in *MultiSsoRequest, opts ...grpc.CallOption) (*MapSsoReply, error) {
	out := new(MapSsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/GetBatchSsoInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) CheckCode(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/CheckCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) ResetPasswordByPhone(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/ResetPasswordByPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) SendMobileCode(ctx context.Context, in *SsoRequest, opts ...grpc.CallOption) (*SsoReply, error) {
	out := new(SsoReply)
	err := grpc.Invoke(ctx, "/pb.Sso/SendMobileCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sso service

type SsoServer interface {
	UpdateRedis(context.Context, *SsoRequest) (*SsoReply, error)
	JudgeUsername(context.Context, *SsoRequest) (*SsoReply, error)
	GetUserInfo(context.Context, *SsoRequest) (*SsoReply, error)
	Login(context.Context, *SsoRequest) (*SsoReply, error)
	GetUserByName(context.Context, *SsoRequest) (*SsoReply, error)
	Add(context.Context, *SsoRequest) (*SsoReply, error)
	CheckPassword(context.Context, *SsoRequest) (*SsoReply, error)
	UpdatePassword(context.Context, *SsoRequest) (*SsoReply, error)
	Logout(context.Context, *SsoRequest) (*SsoReply, error)
	UpdatePasswordByName(context.Context, *SsoRequest) (*SsoReply, error)
	FindPasswordByMail(context.Context, *SsoRequest) (*SsoReply, error)
	ResetPassword(context.Context, *SsoRequest) (*SsoReply, error)
	UpdateState(context.Context, *SsoRequest) (*SsoReply, error)
	GetBatchSsoInfos(context.Context, *MultiSsoRequest) (*MapSsoReply, error)
	CheckCode(context.Context, *SsoRequest) (*SsoReply, error)
	ResetPasswordByPhone(context.Context, *SsoRequest) (*SsoReply, error)
	SendMobileCode(context.Context, *SsoRequest) (*SsoReply, error)
}

func RegisterSsoServer(s *grpc.Server, srv SsoServer) {
	s.RegisterService(&_Sso_serviceDesc, srv)
}

func _Sso_UpdateRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).UpdateRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/UpdateRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).UpdateRedis(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_JudgeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).JudgeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/JudgeUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).JudgeUsername(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetUserInfo(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Login(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetUserByName(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Add(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).CheckPassword(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).UpdatePassword(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Logout(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_UpdatePasswordByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).UpdatePasswordByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/UpdatePasswordByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).UpdatePasswordByName(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_FindPasswordByMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).FindPasswordByMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/FindPasswordByMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).FindPasswordByMail(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).ResetPassword(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).UpdateState(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetBatchSsoInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetBatchSsoInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/GetBatchSsoInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetBatchSsoInfos(ctx, req.(*MultiSsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_CheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).CheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/CheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).CheckCode(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_ResetPasswordByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).ResetPasswordByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/ResetPasswordByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).ResetPasswordByPhone(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_SendMobileCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).SendMobileCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sso/SendMobileCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).SendMobileCode(ctx, req.(*SsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sso_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sso",
	HandlerType: (*SsoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRedis",
			Handler:    _Sso_UpdateRedis_Handler,
		},
		{
			MethodName: "JudgeUsername",
			Handler:    _Sso_JudgeUsername_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Sso_GetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Sso_Login_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:    _Sso_GetUserByName_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Sso_Add_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _Sso_CheckPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Sso_UpdatePassword_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Sso_Logout_Handler,
		},
		{
			MethodName: "UpdatePasswordByName",
			Handler:    _Sso_UpdatePasswordByName_Handler,
		},
		{
			MethodName: "FindPasswordByMail",
			Handler:    _Sso_FindPasswordByMail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Sso_ResetPassword_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Sso_UpdateState_Handler,
		},
		{
			MethodName: "GetBatchSsoInfos",
			Handler:    _Sso_GetBatchSsoInfos_Handler,
		},
		{
			MethodName: "CheckCode",
			Handler:    _Sso_CheckCode_Handler,
		},
		{
			MethodName: "ResetPasswordByPhone",
			Handler:    _Sso_ResetPasswordByPhone_Handler,
		},
		{
			MethodName: "SendMobileCode",
			Handler:    _Sso_SendMobileCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}

func init() { proto.RegisterFile("sso.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x6d, 0x6e, 0xd3, 0x4c,
	0x10, 0xae, 0x9d, 0xc4, 0x8d, 0xc7, 0x7d, 0xdb, 0x6a, 0xdf, 0x0a, 0x2d, 0x11, 0xa0, 0xc8, 0x02,
	0x11, 0x09, 0x35, 0x40, 0x41, 0x08, 0xf5, 0x1f, 0xad, 0x4a, 0x05, 0x6a, 0xaa, 0xca, 0xa6, 0x07,
	0x70, 0xe2, 0xa1, 0xb1, 0xe2, 0x7a, 0x8d, 0x77, 0x0d, 0xf8, 0x38, 0xfc, 0xe0, 0x0a, 0x5c, 0x80,
	0x8b, 0x70, 0x14, 0xb4, 0xeb, 0xfa, 0xb3, 0x40, 0xfc, 0x2b, 0x3b, 0x1f, 0xcf, 0xec, 0x33, 0xcf,
	0x8c, 0x37, 0x60, 0x72, 0xce, 0xa6, 0x71, 0xc2, 0x04, 0x23, 0x7a, 0x3c, 0xb7, 0x7f, 0xe8, 0x00,
	0x2e, 0x67, 0x0e, 0x7e, 0x4a, 0x91, 0x0b, 0x32, 0x82, 0x61, 0xca, 0x31, 0x89, 0xbc, 0x6b, 0xa4,
	0xda, 0x58, 0x9b, 0x98, 0x4e, 0x69, 0xcb, 0x58, 0xec, 0x71, 0xfe, 0x85, 0x25, 0x3e, 0xd5, 0xf3,
	0x58, 0x61, 0x93, 0x31, 0x58, 0x1c, 0x39, 0x0f, 0x58, 0x74, 0x2e, 0xa1, 0x3d, 0x15, 0xae, 0xbb,
	0x08, 0x81, 0x3e, 0xf7, 0x42, 0x41, 0xfb, 0x2a, 0xa4, 0xce, 0x64, 0x17, 0x7a, 0x69, 0xe0, 0xd3,
	0xc1, 0x58, 0x9b, 0x0c, 0x1c, 0x79, 0x24, 0x7b, 0x30, 0xe0, 0xc2, 0x13, 0x48, 0x0d, 0xe5, 0xcb,
	0x0d, 0x42, 0x61, 0x13, 0xbf, 0xc6, 0x22, 0xb8, 0x46, 0xba, 0xa9, 0xfc, 0x85, 0x29, 0x39, 0x45,
	0xc1, 0x62, 0xa5, 0xf8, 0x0e, 0x73, 0x4e, 0x85, 0x2d, 0x6b, 0x09, 0xb6, 0xc2, 0x88, 0x9a, 0x2a,
	0x90, 0x1b, 0x92, 0xc7, 0x82, 0xf9, 0x48, 0x21, 0xe7, 0x21, 0xcf, 0xb2, 0x8a, 0xfc, 0xfd, 0x90,
	0xc5, 0x48, 0x2d, 0x75, 0x41, 0x69, 0x93, 0x3b, 0x60, 0x70, 0x96, 0x26, 0x0b, 0xa4, 0x5b, 0x0a,
	0x71, 0x63, 0xd9, 0xbf, 0x34, 0x18, 0x2a, 0xe1, 0xe2, 0x30, 0x2b, 0x1a, 0xd1, 0xaa, 0x46, 0xea,
	0x42, 0xea, 0x2d, 0x21, 0x1f, 0x00, 0x84, 0xec, 0x2a, 0x88, 0x5c, 0xd5, 0x69, 0x4f, 0x81, 0x6a,
	0x9e, 0x4a, 0x84, 0x7e, 0x5d, 0x84, 0x7b, 0x60, 0x62, 0x92, 0xb0, 0xe4, 0x58, 0xb2, 0xcf, 0x25,
	0xab, 0x1c, 0xed, 0x01, 0x18, 0xb7, 0x07, 0x50, 0x97, 0x6a, 0xf3, 0x6f, 0x52, 0x0d, 0x6b, 0x52,
	0xd9, 0xdf, 0x35, 0xd8, 0x99, 0xa5, 0xa1, 0x08, 0x6a, 0x0b, 0xf2, 0x1c, 0xfa, 0x9c, 0x33, 0x4e,
	0xb5, 0x71, 0x6f, 0x62, 0x1d, 0xdc, 0x9f, 0xc6, 0xf3, 0x69, 0x2b, 0x65, 0xea, 0x72, 0xc6, 0x4f,
	0x22, 0x91, 0x64, 0x8e, 0x4a, 0xad, 0x29, 0xa8, 0xd7, 0x15, 0x1c, 0x9d, 0x82, 0x59, 0xa6, 0x4a,
	0x05, 0x57, 0x98, 0x15, 0x0a, 0xae, 0x30, 0x23, 0x0f, 0x61, 0xf0, 0xd9, 0x0b, 0xd3, 0x1c, 0x65,
	0x1d, 0x6c, 0xcb, 0xab, 0xaa, 0x5b, 0x9c, 0x3c, 0x78, 0xa8, 0xbf, 0xd6, 0xec, 0x6f, 0x1a, 0x58,
	0x33, 0x2f, 0x2e, 0xa7, 0xb1, 0xdf, 0xe0, 0x78, 0x57, 0x71, 0xac, 0xc2, 0xb7, 0xf8, 0x35, 0x84,
	0xd5, 0x5b, 0xc2, 0x8e, 0x4e, 0xfe, 0xcd, 0xd2, 0x6e, 0xb2, 0xdc, 0x2a, 0x59, 0xc6, 0x61, 0x56,
	0xe3, 0x78, 0xf0, 0xd3, 0x80, 0x9e, 0xcb, 0x19, 0xd9, 0x07, 0xeb, 0x32, 0xf6, 0x3d, 0x81, 0x0e,
	0xfa, 0x01, 0x27, 0xad, 0xae, 0x46, 0x0d, 0xbc, 0xbd, 0x41, 0x9e, 0xc2, 0x7f, 0xef, 0x53, 0xff,
	0x0a, 0x2f, 0x8b, 0xdd, 0x59, 0x07, 0xd8, 0x07, 0xeb, 0x14, 0x85, 0x4c, 0x7f, 0x17, 0x7d, 0x64,
	0x6b, 0xd3, 0x1f, 0xc3, 0xe0, 0x4c, 0x2e, 0x5e, 0x17, 0x22, 0x37, 0x75, 0x8f, 0xb2, 0xf3, 0x2e,
	0x44, 0x1e, 0x41, 0xef, 0x8d, 0xef, 0x77, 0xa9, 0x7b, 0xbc, 0xc4, 0xc5, 0xea, 0xa2, 0x78, 0x49,
	0xd6, 0x01, 0x9e, 0xc1, 0x76, 0x2e, 0x60, 0x67, 0xc4, 0x04, 0x8c, 0x33, 0x76, 0xc5, 0x52, 0xb1,
	0x36, 0xf3, 0x15, 0xec, 0x35, 0x6b, 0x77, 0xec, 0xf5, 0x25, 0x90, 0xb7, 0x41, 0xe4, 0x57, 0xa8,
	0x99, 0x17, 0x84, 0x5d, 0x5a, 0x77, 0x90, 0xa3, 0xe8, 0xdc, 0x48, 0xb9, 0x3b, 0xf9, 0x33, 0xb1,
	0x2e, 0xfd, 0x10, 0x76, 0x4f, 0x51, 0x1c, 0x79, 0x62, 0xb1, 0x74, 0x39, 0x93, 0xeb, 0xc0, 0xc9,
	0xff, 0x7f, 0xf8, 0x60, 0x47, 0x3b, 0xad, 0x2f, 0xc4, 0xde, 0x20, 0x4f, 0xc0, 0x54, 0x63, 0x51,
	0x6f, 0x4b, 0x07, 0xd9, 0x1a, 0x8d, 0x1c, 0x65, 0x17, 0x4b, 0x16, 0x61, 0x97, 0x51, 0xba, 0x18,
	0xf9, 0x33, 0x36, 0x0f, 0x42, 0xec, 0x72, 0xd3, 0xdc, 0x50, 0x7f, 0x5c, 0x2f, 0x7e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0x03, 0x5f, 0x85, 0xc5, 0x06, 0x00, 0x00,
}

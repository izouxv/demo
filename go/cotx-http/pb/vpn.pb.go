// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vpn.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	vpn.proto

It has these top-level messages:
	ReqGetVpn
	Vpn
	ResGetVpn
	ReqUpdateVpn
	ResUpdateVpn
	ReqPingGateway
	Ping
	ResPingGateway
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqGetVpn struct {
	UserId    int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId"`
	GatewayId string `protobuf:"bytes,2,opt,name=GatewayId" json:"GatewayId"`
}

func (m *ReqGetVpn) Reset()                    { *m = ReqGetVpn{} }
func (m *ReqGetVpn) String() string            { return proto.CompactTextString(m) }
func (*ReqGetVpn) ProtoMessage()               {}
func (*ReqGetVpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqGetVpn) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqGetVpn) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type Vpn struct {
	State        int32  `protobuf:"varint,1,opt,name=State" json:"State"`
	VpnIp        string `protobuf:"bytes,2,opt,name=VpnIp" json:"VpnIp"`
	UserName     string `protobuf:"bytes,3,opt,name=UserName" json:"UserName"`
	UserPassword string `protobuf:"bytes,4,opt,name=UserPassword" json:"UserPassword"`
	Domain       string `protobuf:"bytes,5,opt,name=Domain" json:"Domain"`
}

func (m *Vpn) Reset()                    { *m = Vpn{} }
func (m *Vpn) String() string            { return proto.CompactTextString(m) }
func (*Vpn) ProtoMessage()               {}
func (*Vpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Vpn) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Vpn) GetVpnIp() string {
	if m != nil {
		return m.VpnIp
	}
	return ""
}

func (m *Vpn) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Vpn) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *Vpn) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type ResGetVpn struct {
	Vpn     *Vpn  `protobuf:"bytes,2,opt,name=Vpn" json:"Vpn"`
	ErrCode int32 `protobuf:"varint,1,opt,name=ErrCode" json:"ErrCode"`
}

func (m *ResGetVpn) Reset()                    { *m = ResGetVpn{} }
func (m *ResGetVpn) String() string            { return proto.CompactTextString(m) }
func (*ResGetVpn) ProtoMessage()               {}
func (*ResGetVpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResGetVpn) GetVpn() *Vpn {
	if m != nil {
		return m.Vpn
	}
	return nil
}

func (m *ResGetVpn) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqUpdateVpn struct {
	UserId       int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId"`
	GatewayId    string `protobuf:"bytes,2,opt,name=GatewayId" json:"GatewayId"`
	State        int32  `protobuf:"varint,3,opt,name=State" json:"State"`
	VpnIp        string `protobuf:"bytes,4,opt,name=VpnIp" json:"VpnIp"`
	UserName     string `protobuf:"bytes,5,opt,name=UserName" json:"UserName"`
	UserPassword string `protobuf:"bytes,6,opt,name=UserPassword" json:"UserPassword"`
	Domain       string `protobuf:"bytes,7,opt,name=Domain" json:"Domain"`
}

func (m *ReqUpdateVpn) Reset()                    { *m = ReqUpdateVpn{} }
func (m *ReqUpdateVpn) String() string            { return proto.CompactTextString(m) }
func (*ReqUpdateVpn) ProtoMessage()               {}
func (*ReqUpdateVpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReqUpdateVpn) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqUpdateVpn) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *ReqUpdateVpn) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ReqUpdateVpn) GetVpnIp() string {
	if m != nil {
		return m.VpnIp
	}
	return ""
}

func (m *ReqUpdateVpn) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ReqUpdateVpn) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *ReqUpdateVpn) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type ResUpdateVpn struct {
	ErrCode int32 `protobuf:"varint,1,opt,name=ErrCode" json:"ErrCode"`
}

func (m *ResUpdateVpn) Reset()                    { *m = ResUpdateVpn{} }
func (m *ResUpdateVpn) String() string            { return proto.CompactTextString(m) }
func (*ResUpdateVpn) ProtoMessage()               {}
func (*ResUpdateVpn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResUpdateVpn) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqPingGateway struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId"`
	GatewayId   string `protobuf:"bytes,2,opt,name=GatewayId" json:"GatewayId"`
	PackageSize int32  `protobuf:"varint,3,opt,name=PackageSize" json:"PackageSize"`
	PackageNum  int32  `protobuf:"varint,4,opt,name=PackageNum" json:"PackageNum"`
	PingIp      string `protobuf:"bytes,5,opt,name=PingIp" json:"PingIp"`
}

func (m *ReqPingGateway) Reset()                    { *m = ReqPingGateway{} }
func (m *ReqPingGateway) String() string            { return proto.CompactTextString(m) }
func (*ReqPingGateway) ProtoMessage()               {}
func (*ReqPingGateway) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReqPingGateway) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReqPingGateway) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *ReqPingGateway) GetPackageSize() int32 {
	if m != nil {
		return m.PackageSize
	}
	return 0
}

func (m *ReqPingGateway) GetPackageNum() int32 {
	if m != nil {
		return m.PackageNum
	}
	return 0
}

func (m *ReqPingGateway) GetPingIp() string {
	if m != nil {
		return m.PingIp
	}
	return ""
}

type Ping struct {
	DelayTime string `protobuf:"bytes,1,opt,name=DelayTime" json:"DelayTime"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ping) GetDelayTime() string {
	if m != nil {
		return m.DelayTime
	}
	return ""
}

type ResPingGateway struct {
	ResPing *Ping `protobuf:"bytes,1,opt,name=ResPing" json:"ResPing"`
	ErrCode int32 `protobuf:"varint,2,opt,name=ErrCode" json:"ErrCode"`
}

func (m *ResPingGateway) Reset()                    { *m = ResPingGateway{} }
func (m *ResPingGateway) String() string            { return proto.CompactTextString(m) }
func (*ResPingGateway) ProtoMessage()               {}
func (*ResPingGateway) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResPingGateway) GetResPing() *Ping {
	if m != nil {
		return m.ResPing
	}
	return nil
}

func (m *ResPingGateway) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetVpn)(nil), "pb.ReqGetVpn")
	proto.RegisterType((*Vpn)(nil), "pb.Vpn")
	proto.RegisterType((*ResGetVpn)(nil), "pb.ResGetVpn")
	proto.RegisterType((*ReqUpdateVpn)(nil), "pb.ReqUpdateVpn")
	proto.RegisterType((*ResUpdateVpn)(nil), "pb.ResUpdateVpn")
	proto.RegisterType((*ReqPingGateway)(nil), "pb.ReqPingGateway")
	proto.RegisterType((*Ping)(nil), "pb.Ping")
	proto.RegisterType((*ResPingGateway)(nil), "pb.ResPingGateway")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcVpn service

type RpcVpnClient interface {
	// 获取vpn的信息
	GetVpn(ctx context.Context, in *ReqGetVpn, opts ...grpc.CallOption) (*ResGetVpn, error)
	// 更新vpn的状态信息
	UpdateVpn(ctx context.Context, in *ReqUpdateVpn, opts ...grpc.CallOption) (*ResUpdateVpn, error)
	// 网关ping 功能
	PingGateway(ctx context.Context, in *ReqPingGateway, opts ...grpc.CallOption) (*ResPingGateway, error)
}

type rpcVpnClient struct {
	cc *grpc.ClientConn
}

func NewRpcVpnClient(cc *grpc.ClientConn) RpcVpnClient {
	return &rpcVpnClient{cc}
}

func (c *rpcVpnClient) GetVpn(ctx context.Context, in *ReqGetVpn, opts ...grpc.CallOption) (*ResGetVpn, error) {
	out := new(ResGetVpn)
	err := grpc.Invoke(ctx, "/pb.Rpc_vpn/GetVpn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcVpnClient) UpdateVpn(ctx context.Context, in *ReqUpdateVpn, opts ...grpc.CallOption) (*ResUpdateVpn, error) {
	out := new(ResUpdateVpn)
	err := grpc.Invoke(ctx, "/pb.Rpc_vpn/UpdateVpn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcVpnClient) PingGateway(ctx context.Context, in *ReqPingGateway, opts ...grpc.CallOption) (*ResPingGateway, error) {
	out := new(ResPingGateway)
	err := grpc.Invoke(ctx, "/pb.Rpc_vpn/PingGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcVpn service

type RpcVpnServer interface {
	// 获取vpn的信息
	GetVpn(context.Context, *ReqGetVpn) (*ResGetVpn, error)
	// 更新vpn的状态信息
	UpdateVpn(context.Context, *ReqUpdateVpn) (*ResUpdateVpn, error)
	// 网关ping 功能
	PingGateway(context.Context, *ReqPingGateway) (*ResPingGateway, error)
}

func RegisterRpcVpnServer(s *grpc.Server, srv RpcVpnServer) {
	s.RegisterService(&_RpcVpn_serviceDesc, srv)
}

func _RpcVpn_GetVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetVpn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcVpnServer).GetVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Rpc_vpn/GetVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcVpnServer).GetVpn(ctx, req.(*ReqGetVpn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcVpn_UpdateVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateVpn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcVpnServer).UpdateVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Rpc_vpn/UpdateVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcVpnServer).UpdateVpn(ctx, req.(*ReqUpdateVpn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcVpn_PingGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPingGateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcVpnServer).PingGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Rpc_vpn/PingGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcVpnServer).PingGateway(ctx, req.(*ReqPingGateway))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcVpn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Rpc_vpn",
	HandlerType: (*RpcVpnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVpn",
			Handler:    _RpcVpn_GetVpn_Handler,
		},
		{
			MethodName: "UpdateVpn",
			Handler:    _RpcVpn_UpdateVpn_Handler,
		},
		{
			MethodName: "PingGateway",
			Handler:    _RpcVpn_PingGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpn.proto",
}

func init() { proto.RegisterFile("vpn.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xd1, 0x6a, 0xe2, 0x40,
	0x14, 0x35, 0x6a, 0x12, 0x73, 0xe3, 0x2e, 0xcb, 0xb0, 0x2c, 0xd9, 0xb0, 0x2c, 0x32, 0xf4, 0x21,
	0x4f, 0x42, 0xed, 0x43, 0x5f, 0x5b, 0x6a, 0x91, 0xbc, 0x88, 0x8c, 0xd5, 0xd7, 0x32, 0x9a, 0x41,
	0x42, 0x9b, 0x64, 0x4c, 0x52, 0xc5, 0xfe, 0x41, 0xbf, 0xa2, 0xfd, 0x9c, 0x7e, 0x56, 0x99, 0xc9,
	0xc4, 0x44, 0xa8, 0x2d, 0xf8, 0x36, 0xe7, 0xdc, 0xb9, 0x33, 0xe7, 0x9c, 0xb9, 0x03, 0xd6, 0x86,
	0xc7, 0x7d, 0x9e, 0x26, 0x79, 0x82, 0x9a, 0x7c, 0x81, 0xaf, 0xc1, 0x22, 0x6c, 0x3d, 0x62, 0xf9,
	0x9c, 0xc7, 0xe8, 0x0f, 0x18, 0xb3, 0x8c, 0xa5, 0x7e, 0xe0, 0x68, 0x3d, 0xcd, 0xd3, 0x89, 0x42,
	0xe8, 0x1f, 0x58, 0x23, 0x9a, 0xb3, 0x2d, 0xdd, 0xf9, 0x81, 0xd3, 0xec, 0x69, 0x9e, 0x45, 0x2a,
	0x02, 0xbf, 0x68, 0xd0, 0x12, 0xdd, 0xbf, 0x41, 0x9f, 0xe6, 0x34, 0x67, 0xaa, 0xb9, 0x00, 0x82,
	0x9d, 0xf3, 0xd8, 0xe7, 0xaa, 0xaf, 0x00, 0xc8, 0x85, 0x8e, 0x38, 0x7b, 0x4c, 0x23, 0xe6, 0xb4,
	0x64, 0x61, 0x8f, 0x11, 0x86, 0xae, 0x58, 0x4f, 0x68, 0x96, 0x6d, 0x93, 0x34, 0x70, 0xda, 0xb2,
	0x7e, 0xc0, 0x09, 0xa5, 0xc3, 0x24, 0xa2, 0x61, 0xec, 0xe8, 0xb2, 0xaa, 0x10, 0xbe, 0x12, 0x76,
	0x32, 0x65, 0xe7, 0xaf, 0xd4, 0x25, 0x2f, 0xb6, 0x07, 0x66, 0x9f, 0x2f, 0xfa, 0x73, 0x1e, 0x13,
	0xa9, 0xd5, 0x01, 0xf3, 0x36, 0x4d, 0x6f, 0x92, 0xa0, 0x54, 0x5b, 0x42, 0xfc, 0xae, 0x41, 0x97,
	0xb0, 0xf5, 0x8c, 0x07, 0x34, 0x67, 0x27, 0x87, 0x52, 0x85, 0xd1, 0xfa, 0x34, 0x8c, 0xf6, 0xb1,
	0x30, 0xf4, 0x6f, 0xc2, 0x30, 0xbe, 0x0c, 0xc3, 0x3c, 0x08, 0xc3, 0x13, 0x4e, 0xb2, 0xca, 0xc9,
	0x71, 0xd3, 0x6f, 0x1a, 0xfc, 0x24, 0x6c, 0x3d, 0x09, 0xe3, 0x95, 0xb2, 0x70, 0xa2, 0xed, 0x1e,
	0xd8, 0x13, 0xba, 0x7c, 0xa0, 0x2b, 0x36, 0x0d, 0x9f, 0x4b, 0xf3, 0x75, 0x0a, 0xfd, 0x07, 0x50,
	0x70, 0xfc, 0x14, 0xc9, 0x1c, 0x74, 0x52, 0x63, 0xc4, 0xbd, 0x42, 0x86, 0xcf, 0xcb, 0x97, 0x2d,
	0x10, 0x3e, 0x83, 0xb6, 0x58, 0x89, 0xfb, 0x87, 0xec, 0x91, 0xee, 0xee, 0xc2, 0xa8, 0xb0, 0x61,
	0x91, 0x8a, 0xc0, 0x63, 0xe1, 0x23, 0xab, 0xfb, 0xc0, 0x60, 0x2a, 0x46, 0xee, 0xb6, 0x07, 0x1d,
	0x31, 0x08, 0x02, 0x93, 0xb2, 0x50, 0x0f, 0xa6, 0x79, 0x10, 0xcc, 0xe0, 0x55, 0x03, 0x93, 0xf0,
	0xe5, 0xfd, 0x86, 0xc7, 0xc8, 0x03, 0x43, 0x0d, 0xd6, 0x0f, 0x71, 0xc4, 0xfe, 0xdb, 0xb8, 0x0a,
	0xaa, 0xb1, 0xc3, 0x0d, 0x74, 0x0e, 0x56, 0x95, 0xfa, 0x2f, 0xb5, 0x79, 0xcf, 0xb8, 0x8a, 0xa9,
	0x5e, 0x06, 0x37, 0xd0, 0x25, 0xd8, 0x75, 0xd5, 0x48, 0x35, 0xd5, 0x38, 0x57, 0x71, 0x75, 0x77,
	0xb8, 0xb1, 0x30, 0xe4, 0x5f, 0xbe, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x7e, 0x3a, 0xe9,
	0xd8, 0x03, 0x00, 0x00,
}

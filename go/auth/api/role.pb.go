// Code generated by protoc-gen-go.
// source: api/role.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoleInfo struct {
	Rid         int32  `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	RoleName    string `protobuf:"bytes,2,opt,name=roleName" json:"roleName,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Tid         int32  `protobuf:"varint,4,opt,name=tid" json:"tid,omitempty"`
}

func (m *RoleInfo) Reset()                    { *m = RoleInfo{} }
func (m *RoleInfo) String() string            { return proto.CompactTextString(m) }
func (*RoleInfo) ProtoMessage()               {}
func (*RoleInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RoleInfo) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RoleInfo) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *RoleInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoleInfo) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type Module struct {
	Mid        int32    `protobuf:"varint,1,opt,name=mid" json:"mid,omitempty"`
	ModuleName string   `protobuf:"bytes,2,opt,name=moduleName" json:"moduleName,omitempty"`
	Operation  []string `protobuf:"bytes,3,rep,name=operation" json:"operation,omitempty"`
}

func (m *Module) Reset()                    { *m = Module{} }
func (m *Module) String() string            { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()               {}
func (*Module) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Module) GetMid() int32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Module) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *Module) GetOperation() []string {
	if m != nil {
		return m.Operation
	}
	return nil
}

type ModuleInfo struct {
	Mid        int32  `protobuf:"varint,1,opt,name=mid" json:"mid,omitempty"`
	ModuleName string `protobuf:"bytes,2,opt,name=moduleName" json:"moduleName,omitempty"`
}

func (m *ModuleInfo) Reset()                    { *m = ModuleInfo{} }
func (m *ModuleInfo) String() string            { return proto.CompactTextString(m) }
func (*ModuleInfo) ProtoMessage()               {}
func (*ModuleInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ModuleInfo) GetMid() int32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ModuleInfo) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

type RoleModules struct {
	RoleInfo *RoleInfo `protobuf:"bytes,1,opt,name=roleInfo" json:"roleInfo,omitempty"`
	Mids     []*Module `protobuf:"bytes,2,rep,name=mids" json:"mids,omitempty"`
}

func (m *RoleModules) Reset()                    { *m = RoleModules{} }
func (m *RoleModules) String() string            { return proto.CompactTextString(m) }
func (*RoleModules) ProtoMessage()               {}
func (*RoleModules) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *RoleModules) GetRoleInfo() *RoleInfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *RoleModules) GetMids() []*Module {
	if m != nil {
		return m.Mids
	}
	return nil
}

type GetRolesRequest struct {
	Tid   int32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Did   int32 `protobuf:"varint,2,opt,name=did" json:"did,omitempty"`
	Page  int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Count int32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *GetRolesRequest) Reset()                    { *m = GetRolesRequest{} }
func (m *GetRolesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRolesRequest) ProtoMessage()               {}
func (*GetRolesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *GetRolesRequest) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *GetRolesRequest) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

func (m *GetRolesRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetRolesRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetRolesResponse struct {
	RoleModules []*RoleModules `protobuf:"bytes,1,rep,name=roleModules" json:"roleModules,omitempty"`
	TotalCount  int32          `protobuf:"varint,2,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (m *GetRolesResponse) Reset()                    { *m = GetRolesResponse{} }
func (m *GetRolesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRolesResponse) ProtoMessage()               {}
func (*GetRolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *GetRolesResponse) GetRoleModules() []*RoleModules {
	if m != nil {
		return m.RoleModules
	}
	return nil
}

func (m *GetRolesResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AddRoleRequest struct {
	RoleName    string    `protobuf:"bytes,1,opt,name=roleName" json:"roleName,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Mids        []*Module `protobuf:"bytes,3,rep,name=mids" json:"mids,omitempty"`
	Tid         int32     `protobuf:"varint,4,opt,name=tid" json:"tid,omitempty"`
	Did         int32     `protobuf:"varint,5,opt,name=did" json:"did,omitempty"`
}

func (m *AddRoleRequest) Reset()                    { *m = AddRoleRequest{} }
func (m *AddRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRoleRequest) ProtoMessage()               {}
func (*AddRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *AddRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *AddRoleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddRoleRequest) GetMids() []*Module {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *AddRoleRequest) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *AddRoleRequest) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

type AddRoleResponse struct {
}

func (m *AddRoleResponse) Reset()                    { *m = AddRoleResponse{} }
func (m *AddRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AddRoleResponse) ProtoMessage()               {}
func (*AddRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type UpdateRoleRequest struct {
	Rid         int32     `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	RoleName    string    `protobuf:"bytes,2,opt,name=roleName" json:"roleName,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Mids        []*Module `protobuf:"bytes,4,rep,name=mids" json:"mids,omitempty"`
}

func (m *UpdateRoleRequest) Reset()                    { *m = UpdateRoleRequest{} }
func (m *UpdateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleRequest) ProtoMessage()               {}
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *UpdateRoleRequest) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *UpdateRoleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateRoleRequest) GetMids() []*Module {
	if m != nil {
		return m.Mids
	}
	return nil
}

type UpdateRoleResponse struct {
}

func (m *UpdateRoleResponse) Reset()                    { *m = UpdateRoleResponse{} }
func (m *UpdateRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleResponse) ProtoMessage()               {}
func (*UpdateRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

type DeleteRoleRequest struct {
	Rid int32 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
}

func (m *DeleteRoleRequest) Reset()                    { *m = DeleteRoleRequest{} }
func (m *DeleteRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleRequest) ProtoMessage()               {}
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *DeleteRoleRequest) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

type DeleteRoleResponse struct {
}

func (m *DeleteRoleResponse) Reset()                    { *m = DeleteRoleResponse{} }
func (m *DeleteRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleResponse) ProtoMessage()               {}
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

type GetModuleByTidRequest struct {
	Tid int32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
}

func (m *GetModuleByTidRequest) Reset()                    { *m = GetModuleByTidRequest{} }
func (m *GetModuleByTidRequest) String() string            { return proto.CompactTextString(m) }
func (*GetModuleByTidRequest) ProtoMessage()               {}
func (*GetModuleByTidRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *GetModuleByTidRequest) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type GetModuleByTidResponse struct {
	Modules []*ModuleInfo `protobuf:"bytes,1,rep,name=Modules" json:"Modules,omitempty"`
}

func (m *GetModuleByTidResponse) Reset()                    { *m = GetModuleByTidResponse{} }
func (m *GetModuleByTidResponse) String() string            { return proto.CompactTextString(m) }
func (*GetModuleByTidResponse) ProtoMessage()               {}
func (*GetModuleByTidResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *GetModuleByTidResponse) GetModules() []*ModuleInfo {
	if m != nil {
		return m.Modules
	}
	return nil
}

type GetModuleByDidRequest struct {
	Did int32 `protobuf:"varint,1,opt,name=did" json:"did,omitempty"`
}

func (m *GetModuleByDidRequest) Reset()                    { *m = GetModuleByDidRequest{} }
func (m *GetModuleByDidRequest) String() string            { return proto.CompactTextString(m) }
func (*GetModuleByDidRequest) ProtoMessage()               {}
func (*GetModuleByDidRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *GetModuleByDidRequest) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

type GetModuleByDidResponse struct {
	Modules []*ModuleInfo `protobuf:"bytes,1,rep,name=Modules" json:"Modules,omitempty"`
}

func (m *GetModuleByDidResponse) Reset()                    { *m = GetModuleByDidResponse{} }
func (m *GetModuleByDidResponse) String() string            { return proto.CompactTextString(m) }
func (*GetModuleByDidResponse) ProtoMessage()               {}
func (*GetModuleByDidResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *GetModuleByDidResponse) GetModules() []*ModuleInfo {
	if m != nil {
		return m.Modules
	}
	return nil
}

type GetRoleByRidRequest struct {
	Rid int32 `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
}

func (m *GetRoleByRidRequest) Reset()                    { *m = GetRoleByRidRequest{} }
func (m *GetRoleByRidRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoleByRidRequest) ProtoMessage()               {}
func (*GetRoleByRidRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *GetRoleByRidRequest) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

type GetRoleByRidResponse struct {
	RoleModules *RoleModules `protobuf:"bytes,1,opt,name=roleModules" json:"roleModules,omitempty"`
}

func (m *GetRoleByRidResponse) Reset()                    { *m = GetRoleByRidResponse{} }
func (m *GetRoleByRidResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRoleByRidResponse) ProtoMessage()               {}
func (*GetRoleByRidResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *GetRoleByRidResponse) GetRoleModules() *RoleModules {
	if m != nil {
		return m.RoleModules
	}
	return nil
}

type Resource struct {
	ResId     int32  `protobuf:"varint,1,opt,name=ResId" json:"ResId,omitempty"`
	ResName   string `protobuf:"bytes,2,opt,name=ResName" json:"ResName,omitempty"`
	ResUrl    string `protobuf:"bytes,3,opt,name=ResUrl" json:"ResUrl,omitempty"`
	ResOpt    string `protobuf:"bytes,4,opt,name=ResOpt" json:"ResOpt,omitempty"`
	ResRemark string `protobuf:"bytes,5,opt,name=ResRemark" json:"ResRemark,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *Resource) GetResId() int32 {
	if m != nil {
		return m.ResId
	}
	return 0
}

func (m *Resource) GetResName() string {
	if m != nil {
		return m.ResName
	}
	return ""
}

func (m *Resource) GetResUrl() string {
	if m != nil {
		return m.ResUrl
	}
	return ""
}

func (m *Resource) GetResOpt() string {
	if m != nil {
		return m.ResOpt
	}
	return ""
}

func (m *Resource) GetResRemark() string {
	if m != nil {
		return m.ResRemark
	}
	return ""
}

type GetResourcesRequest struct {
	Page    int32  `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty"`
	Count   int32  `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	ResName string `protobuf:"bytes,3,opt,name=ResName" json:"ResName,omitempty"`
	ResOpt  string `protobuf:"bytes,4,opt,name=ResOpt" json:"ResOpt,omitempty"`
}

func (m *GetResourcesRequest) Reset()                    { *m = GetResourcesRequest{} }
func (m *GetResourcesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetResourcesRequest) ProtoMessage()               {}
func (*GetResourcesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *GetResourcesRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetResourcesRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetResourcesRequest) GetResName() string {
	if m != nil {
		return m.ResName
	}
	return ""
}

func (m *GetResourcesRequest) GetResOpt() string {
	if m != nil {
		return m.ResOpt
	}
	return ""
}

type GetResourcesResponse struct {
	Resources  []*Resource `protobuf:"bytes,1,rep,name=Resources" json:"Resources,omitempty"`
	TotalCount int32       `protobuf:"varint,2,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (m *GetResourcesResponse) Reset()                    { *m = GetResourcesResponse{} }
func (m *GetResourcesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResourcesResponse) ProtoMessage()               {}
func (*GetResourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *GetResourcesResponse) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *GetResourcesResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type CreateResourceRequest struct {
	Resources *Resource `protobuf:"bytes,1,opt,name=Resources" json:"Resources,omitempty"`
}

func (m *CreateResourceRequest) Reset()                    { *m = CreateResourceRequest{} }
func (m *CreateResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateResourceRequest) ProtoMessage()               {}
func (*CreateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *CreateResourceRequest) GetResources() *Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type CreateResourceResponse struct {
	Resources *Resource `protobuf:"bytes,1,opt,name=Resources" json:"Resources,omitempty"`
}

func (m *CreateResourceResponse) Reset()                    { *m = CreateResourceResponse{} }
func (m *CreateResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResourceResponse) ProtoMessage()               {}
func (*CreateResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *CreateResourceResponse) GetResources() *Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type UpdateResourceRequest struct {
	Resources *Resource `protobuf:"bytes,1,opt,name=Resources" json:"Resources,omitempty"`
}

func (m *UpdateResourceRequest) Reset()                    { *m = UpdateResourceRequest{} }
func (m *UpdateResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateResourceRequest) ProtoMessage()               {}
func (*UpdateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *UpdateResourceRequest) GetResources() *Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type UpdateResourceResponse struct {
}

func (m *UpdateResourceResponse) Reset()                    { *m = UpdateResourceResponse{} }
func (m *UpdateResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResourceResponse) ProtoMessage()               {}
func (*UpdateResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

type DeleteResourceRequest struct {
	ResId int32 `protobuf:"varint,1,opt,name=ResId" json:"ResId,omitempty"`
}

func (m *DeleteResourceRequest) Reset()                    { *m = DeleteResourceRequest{} }
func (m *DeleteResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteResourceRequest) ProtoMessage()               {}
func (*DeleteResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *DeleteResourceRequest) GetResId() int32 {
	if m != nil {
		return m.ResId
	}
	return 0
}

type DeleteResourceResponse struct {
}

func (m *DeleteResourceResponse) Reset()                    { *m = DeleteResourceResponse{} }
func (m *DeleteResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResourceResponse) ProtoMessage()               {}
func (*DeleteResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func init() {
	proto.RegisterType((*RoleInfo)(nil), "api.RoleInfo")
	proto.RegisterType((*Module)(nil), "api.Module")
	proto.RegisterType((*ModuleInfo)(nil), "api.ModuleInfo")
	proto.RegisterType((*RoleModules)(nil), "api.RoleModules")
	proto.RegisterType((*GetRolesRequest)(nil), "api.GetRolesRequest")
	proto.RegisterType((*GetRolesResponse)(nil), "api.GetRolesResponse")
	proto.RegisterType((*AddRoleRequest)(nil), "api.AddRoleRequest")
	proto.RegisterType((*AddRoleResponse)(nil), "api.AddRoleResponse")
	proto.RegisterType((*UpdateRoleRequest)(nil), "api.UpdateRoleRequest")
	proto.RegisterType((*UpdateRoleResponse)(nil), "api.UpdateRoleResponse")
	proto.RegisterType((*DeleteRoleRequest)(nil), "api.DeleteRoleRequest")
	proto.RegisterType((*DeleteRoleResponse)(nil), "api.DeleteRoleResponse")
	proto.RegisterType((*GetModuleByTidRequest)(nil), "api.GetModuleByTidRequest")
	proto.RegisterType((*GetModuleByTidResponse)(nil), "api.GetModuleByTidResponse")
	proto.RegisterType((*GetModuleByDidRequest)(nil), "api.GetModuleByDidRequest")
	proto.RegisterType((*GetModuleByDidResponse)(nil), "api.GetModuleByDidResponse")
	proto.RegisterType((*GetRoleByRidRequest)(nil), "api.GetRoleByRidRequest")
	proto.RegisterType((*GetRoleByRidResponse)(nil), "api.GetRoleByRidResponse")
	proto.RegisterType((*Resource)(nil), "api.Resource")
	proto.RegisterType((*GetResourcesRequest)(nil), "api.GetResourcesRequest")
	proto.RegisterType((*GetResourcesResponse)(nil), "api.GetResourcesResponse")
	proto.RegisterType((*CreateResourceRequest)(nil), "api.CreateResourceRequest")
	proto.RegisterType((*CreateResourceResponse)(nil), "api.CreateResourceResponse")
	proto.RegisterType((*UpdateResourceRequest)(nil), "api.UpdateResourceRequest")
	proto.RegisterType((*UpdateResourceResponse)(nil), "api.UpdateResourceResponse")
	proto.RegisterType((*DeleteResourceRequest)(nil), "api.DeleteResourceRequest")
	proto.RegisterType((*DeleteResourceResponse)(nil), "api.DeleteResourceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoleServer service

type RoleServerClient interface {
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRoleByRid(ctx context.Context, in *GetRoleByRidRequest, opts ...grpc.CallOption) (*GetRoleByRidResponse, error)
	AddDomainRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	DeleteDomainRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	UpdateDomainRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	GetDomainRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetModuleByTid(ctx context.Context, in *GetModuleByTidRequest, opts ...grpc.CallOption) (*GetModuleByTidResponse, error)
	GetModuleByDid(ctx context.Context, in *GetModuleByDidRequest, opts ...grpc.CallOption) (*GetModuleByDidResponse, error)
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
}

type roleServerClient struct {
	cc *grpc.ClientConn
}

func NewRoleServerClient(cc *grpc.ClientConn) RoleServerClient {
	return &roleServerClient{cc}
}

func (c *roleServerClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	out := new(AddRoleResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/AddRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/GetRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetRoleByRid(ctx context.Context, in *GetRoleByRidRequest, opts ...grpc.CallOption) (*GetRoleByRidResponse, error) {
	out := new(GetRoleByRidResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/GetRoleByRid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) AddDomainRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	out := new(AddRoleResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/AddDomainRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) DeleteDomainRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/DeleteDomainRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) UpdateDomainRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/UpdateDomainRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetDomainRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/GetDomainRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetModuleByTid(ctx context.Context, in *GetModuleByTidRequest, opts ...grpc.CallOption) (*GetModuleByTidResponse, error) {
	out := new(GetModuleByTidResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/GetModuleByTid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetModuleByDid(ctx context.Context, in *GetModuleByDidRequest, opts ...grpc.CallOption) (*GetModuleByDidResponse, error) {
	out := new(GetModuleByDidResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/GetModuleByDid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/GetResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/CreateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/UpdateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServerClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := grpc.Invoke(ctx, "/api.RoleServer/DeleteResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleServer service

type RoleServerServer interface {
	AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	GetRoleByRid(context.Context, *GetRoleByRidRequest) (*GetRoleByRidResponse, error)
	AddDomainRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	DeleteDomainRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	UpdateDomainRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	GetDomainRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	GetModuleByTid(context.Context, *GetModuleByTidRequest) (*GetModuleByTidResponse, error)
	GetModuleByDid(context.Context, *GetModuleByDidRequest) (*GetModuleByDidResponse, error)
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
}

func RegisterRoleServerServer(s *grpc.Server, srv RoleServerServer) {
	s.RegisterService(&_RoleServer_serviceDesc, srv)
}

func _RoleServer_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetRoleByRid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByRidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetRoleByRid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/GetRoleByRid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetRoleByRid(ctx, req.(*GetRoleByRidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_AddDomainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).AddDomainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/AddDomainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).AddDomainRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_DeleteDomainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).DeleteDomainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/DeleteDomainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).DeleteDomainRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_UpdateDomainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).UpdateDomainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/UpdateDomainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).UpdateDomainRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetDomainRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetDomainRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/GetDomainRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetDomainRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetModuleByTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleByTidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetModuleByTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/GetModuleByTid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetModuleByTid(ctx, req.(*GetModuleByTidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetModuleByDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleByDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetModuleByDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/GetModuleByDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetModuleByDid(ctx, req.(*GetModuleByDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServer_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServerServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleServer/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServerServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RoleServer",
	HandlerType: (*RoleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRole",
			Handler:    _RoleServer_AddRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleServer_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleServer_UpdateRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _RoleServer_GetRoles_Handler,
		},
		{
			MethodName: "GetRoleByRid",
			Handler:    _RoleServer_GetRoleByRid_Handler,
		},
		{
			MethodName: "AddDomainRole",
			Handler:    _RoleServer_AddDomainRole_Handler,
		},
		{
			MethodName: "DeleteDomainRole",
			Handler:    _RoleServer_DeleteDomainRole_Handler,
		},
		{
			MethodName: "UpdateDomainRole",
			Handler:    _RoleServer_UpdateDomainRole_Handler,
		},
		{
			MethodName: "GetDomainRoles",
			Handler:    _RoleServer_GetDomainRoles_Handler,
		},
		{
			MethodName: "GetModuleByTid",
			Handler:    _RoleServer_GetModuleByTid_Handler,
		},
		{
			MethodName: "GetModuleByDid",
			Handler:    _RoleServer_GetModuleByDid_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _RoleServer_GetResources_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _RoleServer_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _RoleServer_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _RoleServer_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/role.proto",
}

func init() { proto.RegisterFile("api/role.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6b, 0x13, 0x4b,
	0x14, 0xee, 0x36, 0x49, 0x9b, 0x9c, 0xdc, 0xb6, 0xe9, 0x34, 0xc9, 0xdd, 0x9b, 0x2b, 0x1a, 0x16,
	0xc4, 0x14, 0xb1, 0x42, 0x04, 0x41, 0x10, 0x4b, 0xdb, 0x0d, 0xa5, 0x8a, 0x56, 0x46, 0x0b, 0xfa,
	0x24, 0x6b, 0x66, 0x2a, 0x8b, 0x49, 0x76, 0xbb, 0xbb, 0x11, 0xfa, 0xee, 0x83, 0xef, 0x3e, 0xfb,
	0xbf, 0xca, 0xcc, 0x9c, 0xdd, 0x9d, 0xfd, 0x91, 0x94, 0x54, 0xdf, 0x32, 0x67, 0xce, 0x7c, 0xe7,
	0x9b, 0x6f, 0xce, 0xf9, 0x36, 0xb0, 0xed, 0xf8, 0xee, 0xe3, 0xc0, 0x9b, 0xf0, 0x03, 0x3f, 0xf0,
	0x22, 0x8f, 0x54, 0x1c, 0xdf, 0xb5, 0x26, 0x50, 0xa7, 0xde, 0x84, 0x9f, 0xcd, 0x2e, 0x3d, 0xd2,
	0x82, 0x4a, 0xe0, 0x32, 0xd3, 0xe8, 0x1b, 0x83, 0x1a, 0x15, 0x3f, 0x49, 0x0f, 0xea, 0xe2, 0xc0,
	0x1b, 0x67, 0xca, 0xcd, 0xf5, 0xbe, 0x31, 0x68, 0xd0, 0x64, 0x4d, 0xfa, 0xd0, 0x64, 0x3c, 0x1c,
	0x07, 0xae, 0x1f, 0xb9, 0xde, 0xcc, 0xac, 0xc8, 0x6d, 0x3d, 0x24, 0xf0, 0x22, 0x97, 0x99, 0x55,
	0x85, 0x17, 0xb9, 0xcc, 0xfa, 0x00, 0x1b, 0xaf, 0x3d, 0x36, 0x9f, 0x70, 0xb1, 0x37, 0x4d, 0x6b,
	0x4d, 0x5d, 0x46, 0xee, 0x02, 0x4c, 0xe5, 0x9e, 0x56, 0x4d, 0x8b, 0x90, 0x3b, 0xd0, 0xf0, 0x7c,
	0x1e, 0x38, 0x58, 0xad, 0x32, 0x68, 0xd0, 0x34, 0x60, 0xbd, 0x00, 0x50, 0xc8, 0xf1, 0x4d, 0x56,
	0x43, 0xb7, 0x3e, 0x42, 0x53, 0xe8, 0xa0, 0x30, 0x42, 0xb2, 0xaf, 0x2e, 0x2e, 0xc0, 0x24, 0x4a,
	0x73, 0xb8, 0x75, 0xe0, 0xf8, 0xee, 0x41, 0xac, 0x15, 0x4d, 0xb6, 0xc9, 0x3d, 0xa8, 0x4e, 0x5d,
	0x16, 0x9a, 0xeb, 0xfd, 0xca, 0xa0, 0x39, 0x6c, 0xca, 0x34, 0x05, 0x43, 0xe5, 0x86, 0xf5, 0x09,
	0x76, 0x4e, 0x79, 0x24, 0x4e, 0x86, 0x94, 0x5f, 0xcd, 0x79, 0x18, 0xc5, 0xca, 0x18, 0x89, 0x32,
	0x22, 0xc2, 0x5c, 0x26, 0x89, 0xd5, 0xa8, 0xf8, 0x49, 0x08, 0x54, 0x7d, 0xe7, 0x0b, 0x97, 0xc2,
	0xd6, 0xa8, 0xfc, 0x4d, 0xda, 0x50, 0x1b, 0x7b, 0xf3, 0x59, 0x84, 0x9a, 0xaa, 0x85, 0x75, 0x09,
	0xad, 0xb4, 0x40, 0xe8, 0x7b, 0xb3, 0x90, 0x93, 0x21, 0x34, 0x83, 0xf4, 0x3e, 0xa6, 0x21, 0xc9,
	0xb5, 0x92, 0x3b, 0x60, 0x9c, 0xea, 0x49, 0x42, 0xa3, 0xc8, 0x8b, 0x9c, 0xc9, 0x89, 0x2c, 0xa1,
	0xa8, 0x68, 0x11, 0xeb, 0xa7, 0x01, 0xdb, 0x47, 0x8c, 0x89, 0xf3, 0xf1, 0x45, 0xf4, 0x06, 0x31,
	0x96, 0x37, 0xc8, 0x7a, 0xb1, 0x41, 0x62, 0xe9, 0x2a, 0x0b, 0xa4, 0x2b, 0x76, 0x50, 0xac, 0x53,
	0x2d, 0xd1, 0xc9, 0xda, 0x85, 0x9d, 0x84, 0x94, 0xba, 0xbc, 0xf5, 0xdd, 0x80, 0xdd, 0x0b, 0x9f,
	0x39, 0x11, 0xd7, 0xb9, 0xfe, 0xed, 0xf6, 0x8e, 0xd9, 0x57, 0x17, 0x3d, 0x7c, 0x1b, 0x88, 0xce,
	0x02, 0xc9, 0xdd, 0x87, 0x5d, 0x9b, 0x4f, 0xf8, 0x0d, 0xdc, 0xc4, 0x61, 0x3d, 0x0d, 0x0f, 0xef,
	0x43, 0xe7, 0x94, 0x47, 0xaa, 0xca, 0xf1, 0xf5, 0x7b, 0x97, 0x2d, 0xec, 0x28, 0xeb, 0x04, 0xba,
	0xf9, 0x54, 0xec, 0x8d, 0x7d, 0xd8, 0xcc, 0xf6, 0xc5, 0x8e, 0xc6, 0x5d, 0x76, 0x77, 0xbc, 0x9f,
	0xab, 0x67, 0x67, 0xea, 0xb1, 0xb4, 0x1e, 0x2b, 0xd4, 0xb3, 0x6f, 0x57, 0xef, 0x01, 0xec, 0x61,
	0x2b, 0x1f, 0x5f, 0xd3, 0x4c, 0xb5, 0x9c, 0x3c, 0x2f, 0xa1, 0x9d, 0x4d, 0x5c, 0xd4, 0xf7, 0xc6,
	0x8d, 0x7d, 0x6f, 0xfd, 0x30, 0xa0, 0x4e, 0x79, 0xe8, 0xcd, 0x83, 0xb1, 0x1c, 0x31, 0xca, 0xc3,
	0xb3, 0xb8, 0x98, 0x5a, 0x10, 0x13, 0x36, 0x29, 0x0f, 0xb5, 0x46, 0x89, 0x97, 0xa4, 0x0b, 0x1b,
	0x94, 0x87, 0x17, 0xc1, 0x04, 0x5b, 0x04, 0x57, 0x18, 0x3f, 0xf7, 0xd5, 0xac, 0xaa, 0xf8, 0xb9,
	0x1f, 0x09, 0x1b, 0xa3, 0x62, 0x4e, 0xa7, 0x4e, 0xf0, 0x55, 0xb6, 0x71, 0x83, 0xa6, 0x01, 0xeb,
	0x4a, 0xdd, 0x1f, 0xc9, 0x24, 0x7e, 0x41, 0xa0, 0xfa, 0x56, 0x78, 0x81, 0xe2, 0x24, 0x7f, 0x0b,
	0xa2, 0xfa, 0xa0, 0xaa, 0x85, 0x4e, 0xb4, 0x52, 0x46, 0xb4, 0x40, 0xc8, 0x1a, 0x2b, 0x25, 0xd3,
	0x92, 0xa8, 0xe4, 0x43, 0x49, 0x54, 0x05, 0xf1, 0xdd, 0xd0, 0x03, 0x31, 0x4a, 0xd3, 0xfd, 0x1b,
	0xad, 0xc3, 0x86, 0xce, 0x49, 0xc0, 0xc5, 0x28, 0xc4, 0x87, 0xf1, 0x66, 0xb9, 0x2a, 0xc6, 0xb2,
	0x2a, 0xd6, 0x08, 0xba, 0x79, 0x94, 0x72, 0xb2, 0xcb, 0x61, 0x6c, 0xe8, 0xe0, 0x5c, 0xfe, 0x09,
	0x19, 0x13, 0xba, 0x79, 0x14, 0x1c, 0xd2, 0x47, 0xd0, 0xc1, 0xd1, 0xcd, 0xe1, 0x97, 0xf6, 0x96,
	0x00, 0xca, 0xa7, 0x2b, 0xa0, 0xe1, 0xaf, 0x3a, 0x80, 0xe8, 0xda, 0x77, 0x3c, 0xf8, 0xc6, 0x03,
	0xf2, 0x14, 0x36, 0xd1, 0xe9, 0xc8, 0x9e, 0xa4, 0x95, 0x35, 0xe3, 0x5e, 0x3b, 0x1b, 0x44, 0x36,
	0x6b, 0xe4, 0x10, 0x20, 0xb5, 0x12, 0xd2, 0x95, 0x59, 0x05, 0x0b, 0xea, 0xfd, 0x5b, 0x88, 0xeb,
	0x00, 0xa9, 0x91, 0x21, 0x40, 0xc1, 0x5f, 0x11, 0xa0, 0xc4, 0xf1, 0xd6, 0xc8, 0x33, 0xa8, 0xc7,
	0x5f, 0x28, 0xa2, 0x58, 0xe6, 0xbe, 0x88, 0xbd, 0x4e, 0x2e, 0x9a, 0x1c, 0x1d, 0xc1, 0x3f, 0xfa,
	0xa0, 0x13, 0x53, 0x4f, 0xd4, 0x4d, 0xa2, 0xf7, 0x5f, 0xc9, 0x4e, 0x02, 0xf3, 0x1c, 0xb6, 0x8e,
	0x18, 0xb3, 0xbd, 0xa9, 0xe3, 0xce, 0x56, 0x57, 0x70, 0x04, 0x2d, 0x25, 0x8c, 0x06, 0x70, 0x0b,
	0x1d, 0x47, 0xd0, 0x52, 0xf2, 0x14, 0x60, 0x56, 0x52, 0xf3, 0x10, 0xb6, 0x4f, 0x79, 0x94, 0x62,
	0xac, 0xac, 0xe9, 0x2b, 0x09, 0xa0, 0x7d, 0x1a, 0x48, 0x2f, 0x4e, 0x2d, 0x7e, 0x5a, 0x7a, 0xff,
	0x97, 0xee, 0x2d, 0x00, 0xb3, 0xcb, 0xc0, 0xec, 0x25, 0x60, 0x76, 0x06, 0x0c, 0x5f, 0x3b, 0xf1,
	0x95, 0xf4, 0xb5, 0x73, 0x96, 0xa8, 0xbd, 0x76, 0xde, 0xb9, 0x14, 0xa7, 0xac, 0x51, 0x20, 0xa7,
	0x52, 0x0f, 0x42, 0x4e, 0xe5, 0xce, 0xa2, 0xc0, 0xb2, 0x83, 0x8e, 0x60, 0xa5, 0x1e, 0x82, 0x60,
	0x0b, 0x9c, 0x41, 0x82, 0x65, 0x87, 0x1d, 0xc1, 0x4a, 0x0d, 0x03, 0xc1, 0xca, 0xdd, 0xc1, 0x5a,
	0xfb, 0xbc, 0x21, 0xff, 0xc8, 0x3f, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x89, 0xfd, 0x0a, 0x04,
	0xda, 0x0b, 0x00, 0x00,
}

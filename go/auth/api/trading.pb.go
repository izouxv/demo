// Code generated by protoc-gen-go.
// source: api/trading.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TradingRecord struct {
	TradingId         int32   `protobuf:"varint,1,opt,name=TradingId" json:"TradingId,omitempty"`
	Tid               int32   `protobuf:"varint,2,opt,name=Tid" json:"Tid,omitempty"`
	CreateTime        int64   `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty"`
	TradingContent    string  `protobuf:"bytes,4,opt,name=TradingContent" json:"TradingContent,omitempty"`
	TradingUnitPrice  float32 `protobuf:"fixed32,5,opt,name=TradingUnitPrice" json:"TradingUnitPrice,omitempty"`
	TradingCount      int32   `protobuf:"varint,6,opt,name=TradingCount" json:"TradingCount,omitempty"`
	TradingState      int32   `protobuf:"varint,7,opt,name=TradingState" json:"TradingState,omitempty"`
	TradingTotalPrice float32 `protobuf:"fixed32,8,opt,name=TradingTotalPrice" json:"TradingTotalPrice,omitempty"`
}

func (m *TradingRecord) Reset()                    { *m = TradingRecord{} }
func (m *TradingRecord) String() string            { return proto.CompactTextString(m) }
func (*TradingRecord) ProtoMessage()               {}
func (*TradingRecord) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *TradingRecord) GetTradingId() int32 {
	if m != nil {
		return m.TradingId
	}
	return 0
}

func (m *TradingRecord) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TradingRecord) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TradingRecord) GetTradingContent() string {
	if m != nil {
		return m.TradingContent
	}
	return ""
}

func (m *TradingRecord) GetTradingUnitPrice() float32 {
	if m != nil {
		return m.TradingUnitPrice
	}
	return 0
}

func (m *TradingRecord) GetTradingCount() int32 {
	if m != nil {
		return m.TradingCount
	}
	return 0
}

func (m *TradingRecord) GetTradingState() int32 {
	if m != nil {
		return m.TradingState
	}
	return 0
}

func (m *TradingRecord) GetTradingTotalPrice() float32 {
	if m != nil {
		return m.TradingTotalPrice
	}
	return 0
}

type GetTenantAccountRequest struct {
	Tid int32 `protobuf:"varint,1,opt,name=Tid" json:"Tid,omitempty"`
}

func (m *GetTenantAccountRequest) Reset()                    { *m = GetTenantAccountRequest{} }
func (m *GetTenantAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTenantAccountRequest) ProtoMessage()               {}
func (*GetTenantAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *GetTenantAccountRequest) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type GetTenantAccountResponse struct {
	Balance float32 `protobuf:"fixed32,1,opt,name=Balance" json:"Balance,omitempty"`
}

func (m *GetTenantAccountResponse) Reset()                    { *m = GetTenantAccountResponse{} }
func (m *GetTenantAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTenantAccountResponse) ProtoMessage()               {}
func (*GetTenantAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *GetTenantAccountResponse) GetBalance() float32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type UpdateTenantAccountRequest struct {
	Tid        int32   `protobuf:"varint,1,opt,name=Tid" json:"Tid,omitempty"`
	Balance    float32 `protobuf:"fixed32,2,opt,name=Balance" json:"Balance,omitempty"`
	ActionType int32   `protobuf:"varint,3,opt,name=ActionType" json:"ActionType,omitempty"`
}

func (m *UpdateTenantAccountRequest) Reset()                    { *m = UpdateTenantAccountRequest{} }
func (m *UpdateTenantAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTenantAccountRequest) ProtoMessage()               {}
func (*UpdateTenantAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *UpdateTenantAccountRequest) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *UpdateTenantAccountRequest) GetBalance() float32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *UpdateTenantAccountRequest) GetActionType() int32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

type UpdateTenantAccountResponse struct {
}

func (m *UpdateTenantAccountResponse) Reset()                    { *m = UpdateTenantAccountResponse{} }
func (m *UpdateTenantAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTenantAccountResponse) ProtoMessage()               {}
func (*UpdateTenantAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

type GetTradingRecordsRequest struct {
	Tid   int32 `protobuf:"varint,1,opt,name=Tid" json:"Tid,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty"`
	Count int32 `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
}

func (m *GetTradingRecordsRequest) Reset()                    { *m = GetTradingRecordsRequest{} }
func (m *GetTradingRecordsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTradingRecordsRequest) ProtoMessage()               {}
func (*GetTradingRecordsRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *GetTradingRecordsRequest) GetTid() int32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *GetTradingRecordsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetTradingRecordsRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetTradingRecordsResponse struct {
	TradingRecords []*TradingRecord `protobuf:"bytes,1,rep,name=TradingRecords" json:"TradingRecords,omitempty"`
	TotalCount     int32            `protobuf:"varint,2,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (m *GetTradingRecordsResponse) Reset()                    { *m = GetTradingRecordsResponse{} }
func (m *GetTradingRecordsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTradingRecordsResponse) ProtoMessage()               {}
func (*GetTradingRecordsResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *GetTradingRecordsResponse) GetTradingRecords() []*TradingRecord {
	if m != nil {
		return m.TradingRecords
	}
	return nil
}

func (m *GetTradingRecordsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*TradingRecord)(nil), "api.TradingRecord")
	proto.RegisterType((*GetTenantAccountRequest)(nil), "api.GetTenantAccountRequest")
	proto.RegisterType((*GetTenantAccountResponse)(nil), "api.GetTenantAccountResponse")
	proto.RegisterType((*UpdateTenantAccountRequest)(nil), "api.UpdateTenantAccountRequest")
	proto.RegisterType((*UpdateTenantAccountResponse)(nil), "api.UpdateTenantAccountResponse")
	proto.RegisterType((*GetTradingRecordsRequest)(nil), "api.GetTradingRecordsRequest")
	proto.RegisterType((*GetTradingRecordsResponse)(nil), "api.GetTradingRecordsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TradingServer service

type TradingServerClient interface {
	GetTenantAccount(ctx context.Context, in *GetTenantAccountRequest, opts ...grpc.CallOption) (*GetTenantAccountResponse, error)
	UpdateTenantAccount(ctx context.Context, in *UpdateTenantAccountRequest, opts ...grpc.CallOption) (*UpdateTenantAccountResponse, error)
	GetTradingRecords(ctx context.Context, in *GetTradingRecordsRequest, opts ...grpc.CallOption) (*GetTradingRecordsResponse, error)
}

type tradingServerClient struct {
	cc *grpc.ClientConn
}

func NewTradingServerClient(cc *grpc.ClientConn) TradingServerClient {
	return &tradingServerClient{cc}
}

func (c *tradingServerClient) GetTenantAccount(ctx context.Context, in *GetTenantAccountRequest, opts ...grpc.CallOption) (*GetTenantAccountResponse, error) {
	out := new(GetTenantAccountResponse)
	err := grpc.Invoke(ctx, "/api.TradingServer/GetTenantAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServerClient) UpdateTenantAccount(ctx context.Context, in *UpdateTenantAccountRequest, opts ...grpc.CallOption) (*UpdateTenantAccountResponse, error) {
	out := new(UpdateTenantAccountResponse)
	err := grpc.Invoke(ctx, "/api.TradingServer/UpdateTenantAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServerClient) GetTradingRecords(ctx context.Context, in *GetTradingRecordsRequest, opts ...grpc.CallOption) (*GetTradingRecordsResponse, error) {
	out := new(GetTradingRecordsResponse)
	err := grpc.Invoke(ctx, "/api.TradingServer/GetTradingRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TradingServer service

type TradingServerServer interface {
	GetTenantAccount(context.Context, *GetTenantAccountRequest) (*GetTenantAccountResponse, error)
	UpdateTenantAccount(context.Context, *UpdateTenantAccountRequest) (*UpdateTenantAccountResponse, error)
	GetTradingRecords(context.Context, *GetTradingRecordsRequest) (*GetTradingRecordsResponse, error)
}

func RegisterTradingServerServer(s *grpc.Server, srv TradingServerServer) {
	s.RegisterService(&_TradingServer_serviceDesc, srv)
}

func _TradingServer_GetTenantAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServerServer).GetTenantAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TradingServer/GetTenantAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServerServer).GetTenantAccount(ctx, req.(*GetTenantAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingServer_UpdateTenantAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServerServer).UpdateTenantAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TradingServer/UpdateTenantAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServerServer).UpdateTenantAccount(ctx, req.(*UpdateTenantAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingServer_GetTradingRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradingRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServerServer).GetTradingRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TradingServer/GetTradingRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServerServer).GetTradingRecords(ctx, req.(*GetTradingRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TradingServer",
	HandlerType: (*TradingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantAccount",
			Handler:    _TradingServer_GetTenantAccount_Handler,
		},
		{
			MethodName: "UpdateTenantAccount",
			Handler:    _TradingServer_UpdateTenantAccount_Handler,
		},
		{
			MethodName: "GetTradingRecords",
			Handler:    _TradingServer_GetTradingRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/trading.proto",
}

func init() { proto.RegisterFile("api/trading.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x25, 0x49, 0xb7, 0xa5, 0xc3, 0x87, 0x76, 0x07, 0x24, 0xcc, 0xd2, 0x96, 0xc8, 0x07, 0x14,
	0x01, 0x5a, 0xa4, 0xc2, 0x89, 0x5b, 0xe9, 0x01, 0x71, 0x2b, 0x6e, 0xca, 0x81, 0x9b, 0x49, 0x46,
	0xc5, 0x52, 0x71, 0x42, 0xe2, 0x05, 0xf1, 0x3f, 0xf8, 0x13, 0xfc, 0x4b, 0x14, 0xdb, 0x9b, 0x4d,
	0x36, 0x89, 0xd4, 0x9b, 0xe7, 0xcd, 0xc7, 0x9b, 0xbc, 0x37, 0x0a, 0x2c, 0x64, 0xa9, 0xde, 0x98,
	0x4a, 0xe6, 0x4a, 0x5f, 0xaf, 0xca, 0xaa, 0x30, 0x05, 0x46, 0xb2, 0x54, 0xfc, 0x5f, 0x08, 0x0f,
	0x52, 0x07, 0x0b, 0xca, 0x8a, 0x2a, 0xc7, 0x23, 0x38, 0xf4, 0xc0, 0xa7, 0x9c, 0x05, 0x71, 0x90,
	0xcc, 0xc4, 0x16, 0xc0, 0x39, 0x44, 0xa9, 0xca, 0x59, 0x68, 0xf1, 0xe6, 0x89, 0x27, 0x00, 0xe7,
	0x15, 0x49, 0x43, 0xa9, 0xfa, 0x41, 0x2c, 0x8a, 0x83, 0x24, 0x12, 0x1d, 0x04, 0x5f, 0xc0, 0x43,
	0xdf, 0x7e, 0x5e, 0x68, 0x43, 0xda, 0xb0, 0xbd, 0x38, 0x48, 0x0e, 0xc5, 0x0e, 0x8a, 0x2f, 0x61,
	0xee, 0x91, 0x2b, 0xad, 0xcc, 0x45, 0xa5, 0x32, 0x62, 0xb3, 0x38, 0x48, 0x42, 0x31, 0xc0, 0x91,
	0xc3, 0xfd, 0xb6, 0x7b, 0xad, 0x0d, 0xdb, 0xb7, 0xeb, 0xf4, 0xb0, 0x4e, 0xcd, 0xa5, 0x91, 0x86,
	0xd8, 0x41, 0xaf, 0xc6, 0x62, 0xf8, 0x1a, 0x16, 0x3e, 0x4e, 0x0b, 0x23, 0x6f, 0x1c, 0xe9, 0x5d,
	0x4b, 0x3a, 0x4c, 0xf0, 0x57, 0xf0, 0xe4, 0x23, 0x99, 0x94, 0xb4, 0xd4, 0xe6, 0x2c, 0xcb, 0x1a,
	0x16, 0x41, 0x3f, 0xd7, 0x54, 0x9b, 0x8d, 0x2c, 0x41, 0x2b, 0x0b, 0x7f, 0x07, 0x6c, 0x58, 0x5c,
	0x97, 0x85, 0xae, 0x09, 0x19, 0x1c, 0x7c, 0x90, 0x37, 0x52, 0x67, 0x64, 0x3b, 0x42, 0xb1, 0x09,
	0xf9, 0x77, 0x58, 0x5e, 0x95, 0x79, 0x23, 0xdd, 0xad, 0x58, 0xba, 0x93, 0xc2, 0xde, 0xa4, 0xc6,
	0x96, 0xb3, 0xcc, 0xa8, 0x42, 0xa7, 0x7f, 0x4a, 0x67, 0xcb, 0x4c, 0x74, 0x10, 0x7e, 0x0c, 0xcf,
	0x46, 0x99, 0xdc, 0x8a, 0xfc, 0x8b, 0x5b, 0xbf, 0x7b, 0x19, 0xf5, 0xf4, 0x1a, 0x08, 0x7b, 0x17,
	0xf2, 0x9a, 0xfc, 0x59, 0xd8, 0x37, 0x3e, 0x86, 0x99, 0x33, 0xc7, 0x71, 0xbb, 0x80, 0xff, 0x86,
	0xa7, 0x23, 0x73, 0xbd, 0x2e, 0xef, 0xdb, 0x53, 0xf1, 0x19, 0x16, 0xc4, 0x51, 0x72, 0xef, 0x14,
	0x57, 0xb2, 0x54, 0xab, 0x5e, 0x4a, 0xec, 0x54, 0x36, 0xdf, 0x6b, 0x1a, 0xab, 0x1c, 0xa7, 0x5b,
	0xa4, 0x83, 0x9c, 0xfe, 0xdd, 0x1e, 0xfa, 0x25, 0x55, 0xbf, 0xa8, 0xc2, 0xcf, 0x30, 0xdf, 0x75,
	0x08, 0x8f, 0x2c, 0xd3, 0x84, 0xcb, 0xcb, 0xe3, 0x89, 0xac, 0xd7, 0xec, 0x0e, 0x7e, 0x85, 0x47,
	0x23, 0xa2, 0xe2, 0x73, 0xdb, 0x37, 0x6d, 0xec, 0x32, 0x9e, 0x2e, 0x68, 0x67, 0xa7, 0xb0, 0x18,
	0x28, 0x87, 0xdb, 0x8d, 0xc6, 0x9c, 0x5a, 0x9e, 0x4c, 0xa5, 0x37, 0x53, 0xbf, 0xed, 0xdb, 0x7f,
	0xc1, 0xdb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x91, 0x10, 0x68, 0xa1, 0x20, 0x04, 0x00, 0x00,
}

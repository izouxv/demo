// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/device.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceTypes int32

const (
	DeviceTypes_Pet  DeviceTypes = 0
	DeviceTypes_User DeviceTypes = 1
)

var DeviceTypes_name = map[int32]string{
	0: "Pet",
	1: "User",
}
var DeviceTypes_value = map[string]int32{
	"Pet":  0,
	"User": 1,
}

func (x DeviceTypes) String() string {
	return proto.EnumName(DeviceTypes_name, int32(x))
}
func (DeviceTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_db9d7746ec92d4b1, []int{0}
}

type DevPermit int32

const (
	DevPermit_DevPermit0 DevPermit = 0
	DevPermit_DevPermit1 DevPermit = 1
)

var DevPermit_name = map[int32]string{
	0: "DevPermit0",
	1: "DevPermit1",
}
var DevPermit_value = map[string]int32{
	"DevPermit0": 0,
	"DevPermit1": 1,
}

func (x DevPermit) String() string {
	return proto.EnumName(DevPermit_name, int32(x))
}
func (DevPermit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_db9d7746ec92d4b1, []int{1}
}

type DeviceRequest struct {
	Source               string      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Did                  int32       `protobuf:"varint,2,opt,name=did,proto3" json:"did,omitempty"`
	Uid                  int32       `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Pid                  int32       `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Touid                int32       `protobuf:"varint,5,opt,name=touid,proto3" json:"touid,omitempty"`
	Sn                   string      `protobuf:"bytes,6,opt,name=sn,proto3" json:"sn,omitempty"`
	DeviceMac            string      `protobuf:"bytes,7,opt,name=deviceMac,proto3" json:"deviceMac,omitempty"`
	DeviceName           string      `protobuf:"bytes,8,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceVersion        string      `protobuf:"bytes,9,opt,name=deviceVersion,proto3" json:"deviceVersion,omitempty"`
	SoftwareVersion      string      `protobuf:"bytes,10,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	Permit               DevPermit   `protobuf:"varint,11,opt,name=permit,proto3,enum=pb.DevPermit" json:"permit,omitempty"`
	Types                DeviceTypes `protobuf:"varint,12,opt,name=types,proto3,enum=pb.DeviceTypes" json:"types,omitempty"`
	Isdel                uint32      `protobuf:"varint,13,opt,name=isdel,proto3" json:"isdel,omitempty"`
	Input                string      `protobuf:"bytes,14,opt,name=input,proto3" json:"input,omitempty"`
	LedModel             int32       `protobuf:"varint,15,opt,name=ledModel,proto3" json:"ledModel,omitempty"`
	LedColor             int32       `protobuf:"varint,16,opt,name=ledColor,proto3" json:"ledColor,omitempty"`
	LedLight             int32       `protobuf:"varint,17,opt,name=ledLight,proto3" json:"ledLight,omitempty"`
	LedState             int32       `protobuf:"varint,18,opt,name=ledState,proto3" json:"ledState,omitempty"`
	AudioId              int32       `protobuf:"varint,19,opt,name=audioId,proto3" json:"audioId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeviceRequest) Reset()         { *m = DeviceRequest{} }
func (m *DeviceRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRequest) ProtoMessage()    {}
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_db9d7746ec92d4b1, []int{0}
}
func (m *DeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRequest.Unmarshal(m, b)
}
func (m *DeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRequest.Marshal(b, m, deterministic)
}
func (dst *DeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRequest.Merge(dst, src)
}
func (m *DeviceRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceRequest.Size(m)
}
func (m *DeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRequest proto.InternalMessageInfo

func (m *DeviceRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *DeviceRequest) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

func (m *DeviceRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DeviceRequest) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *DeviceRequest) GetTouid() int32 {
	if m != nil {
		return m.Touid
	}
	return 0
}

func (m *DeviceRequest) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *DeviceRequest) GetDeviceMac() string {
	if m != nil {
		return m.DeviceMac
	}
	return ""
}

func (m *DeviceRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DeviceRequest) GetDeviceVersion() string {
	if m != nil {
		return m.DeviceVersion
	}
	return ""
}

func (m *DeviceRequest) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *DeviceRequest) GetPermit() DevPermit {
	if m != nil {
		return m.Permit
	}
	return DevPermit_DevPermit0
}

func (m *DeviceRequest) GetTypes() DeviceTypes {
	if m != nil {
		return m.Types
	}
	return DeviceTypes_Pet
}

func (m *DeviceRequest) GetIsdel() uint32 {
	if m != nil {
		return m.Isdel
	}
	return 0
}

func (m *DeviceRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *DeviceRequest) GetLedModel() int32 {
	if m != nil {
		return m.LedModel
	}
	return 0
}

func (m *DeviceRequest) GetLedColor() int32 {
	if m != nil {
		return m.LedColor
	}
	return 0
}

func (m *DeviceRequest) GetLedLight() int32 {
	if m != nil {
		return m.LedLight
	}
	return 0
}

func (m *DeviceRequest) GetLedState() int32 {
	if m != nil {
		return m.LedState
	}
	return 0
}

func (m *DeviceRequest) GetAudioId() int32 {
	if m != nil {
		return m.AudioId
	}
	return 0
}

type DeviceReply struct {
	Source               string      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Did                  int32       `protobuf:"varint,2,opt,name=did,proto3" json:"did,omitempty"`
	Uid                  int32       `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Pid                  int32       `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Touid                int32       `protobuf:"varint,5,opt,name=touid,proto3" json:"touid,omitempty"`
	Sn                   string      `protobuf:"bytes,6,opt,name=sn,proto3" json:"sn,omitempty"`
	DeviceMac            string      `protobuf:"bytes,7,opt,name=deviceMac,proto3" json:"deviceMac,omitempty"`
	DeviceName           string      `protobuf:"bytes,8,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceVersion        string      `protobuf:"bytes,9,opt,name=deviceVersion,proto3" json:"deviceVersion,omitempty"`
	SoftwareVersion      string      `protobuf:"bytes,10,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	Permit               DevPermit   `protobuf:"varint,11,opt,name=permit,proto3,enum=pb.DevPermit" json:"permit,omitempty"`
	Types                DeviceTypes `protobuf:"varint,12,opt,name=types,proto3,enum=pb.DeviceTypes" json:"types,omitempty"`
	Isdel                uint32      `protobuf:"varint,13,opt,name=isdel,proto3" json:"isdel,omitempty"`
	ShareUrl             string      `protobuf:"bytes,14,opt,name=shareUrl,proto3" json:"shareUrl,omitempty"`
	Code                 int32       `protobuf:"varint,15,opt,name=code,proto3" json:"code,omitempty"`
	LedModel             int32       `protobuf:"varint,16,opt,name=ledModel,proto3" json:"ledModel,omitempty"`
	LedColor             int32       `protobuf:"varint,17,opt,name=ledColor,proto3" json:"ledColor,omitempty"`
	LedLight             int32       `protobuf:"varint,18,opt,name=ledLight,proto3" json:"ledLight,omitempty"`
	LedState             int32       `protobuf:"varint,19,opt,name=ledState,proto3" json:"ledState,omitempty"`
	AudioId              int32       `protobuf:"varint,20,opt,name=audioId,proto3" json:"audioId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeviceReply) Reset()         { *m = DeviceReply{} }
func (m *DeviceReply) String() string { return proto.CompactTextString(m) }
func (*DeviceReply) ProtoMessage()    {}
func (*DeviceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_db9d7746ec92d4b1, []int{1}
}
func (m *DeviceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceReply.Unmarshal(m, b)
}
func (m *DeviceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceReply.Marshal(b, m, deterministic)
}
func (dst *DeviceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceReply.Merge(dst, src)
}
func (m *DeviceReply) XXX_Size() int {
	return xxx_messageInfo_DeviceReply.Size(m)
}
func (m *DeviceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceReply proto.InternalMessageInfo

func (m *DeviceReply) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *DeviceReply) GetDid() int32 {
	if m != nil {
		return m.Did
	}
	return 0
}

func (m *DeviceReply) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DeviceReply) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *DeviceReply) GetTouid() int32 {
	if m != nil {
		return m.Touid
	}
	return 0
}

func (m *DeviceReply) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *DeviceReply) GetDeviceMac() string {
	if m != nil {
		return m.DeviceMac
	}
	return ""
}

func (m *DeviceReply) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DeviceReply) GetDeviceVersion() string {
	if m != nil {
		return m.DeviceVersion
	}
	return ""
}

func (m *DeviceReply) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *DeviceReply) GetPermit() DevPermit {
	if m != nil {
		return m.Permit
	}
	return DevPermit_DevPermit0
}

func (m *DeviceReply) GetTypes() DeviceTypes {
	if m != nil {
		return m.Types
	}
	return DeviceTypes_Pet
}

func (m *DeviceReply) GetIsdel() uint32 {
	if m != nil {
		return m.Isdel
	}
	return 0
}

func (m *DeviceReply) GetShareUrl() string {
	if m != nil {
		return m.ShareUrl
	}
	return ""
}

func (m *DeviceReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeviceReply) GetLedModel() int32 {
	if m != nil {
		return m.LedModel
	}
	return 0
}

func (m *DeviceReply) GetLedColor() int32 {
	if m != nil {
		return m.LedColor
	}
	return 0
}

func (m *DeviceReply) GetLedLight() int32 {
	if m != nil {
		return m.LedLight
	}
	return 0
}

func (m *DeviceReply) GetLedState() int32 {
	if m != nil {
		return m.LedState
	}
	return 0
}

func (m *DeviceReply) GetAudioId() int32 {
	if m != nil {
		return m.AudioId
	}
	return 0
}

// 批量返回
type BatchDeviceRe struct {
	Source               string         `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Code                 int32          `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Devices              []*DeviceReply `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`
	TotalCount           int32          `protobuf:"varint,4,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BatchDeviceRe) Reset()         { *m = BatchDeviceRe{} }
func (m *BatchDeviceRe) String() string { return proto.CompactTextString(m) }
func (*BatchDeviceRe) ProtoMessage()    {}
func (*BatchDeviceRe) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_db9d7746ec92d4b1, []int{2}
}
func (m *BatchDeviceRe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchDeviceRe.Unmarshal(m, b)
}
func (m *BatchDeviceRe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchDeviceRe.Marshal(b, m, deterministic)
}
func (dst *BatchDeviceRe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDeviceRe.Merge(dst, src)
}
func (m *BatchDeviceRe) XXX_Size() int {
	return xxx_messageInfo_BatchDeviceRe.Size(m)
}
func (m *BatchDeviceRe) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDeviceRe.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDeviceRe proto.InternalMessageInfo

func (m *BatchDeviceRe) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BatchDeviceRe) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BatchDeviceRe) GetDevices() []*DeviceReply {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *BatchDeviceRe) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceRequest)(nil), "pb.DeviceRequest")
	proto.RegisterType((*DeviceReply)(nil), "pb.DeviceReply")
	proto.RegisterType((*BatchDeviceRe)(nil), "pb.BatchDeviceRe")
	proto.RegisterEnum("pb.DeviceTypes", DeviceTypes_name, DeviceTypes_value)
	proto.RegisterEnum("pb.DevPermit", DevPermit_name, DevPermit_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicesClient interface {
	VerificationDeviceBySn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error)
	SetDeviceBySn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error)
	DeleteDeviceByDid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error)
	UpdateDeviceByDid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error)
	GetDevicesByUid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*BatchDeviceRe, error)
	GetDevicesByDid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error)
	GetDeviceSn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error)
}

type devicesClient struct {
	cc *grpc.ClientConn
}

func NewDevicesClient(cc *grpc.ClientConn) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) VerificationDeviceBySn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/pb.Devices/VerificationDeviceBySn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) SetDeviceBySn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/pb.Devices/SetDeviceBySn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeleteDeviceByDid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/pb.Devices/DeleteDeviceByDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) UpdateDeviceByDid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/pb.Devices/UpdateDeviceByDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDevicesByUid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*BatchDeviceRe, error) {
	out := new(BatchDeviceRe)
	err := c.cc.Invoke(ctx, "/pb.Devices/GetDevicesByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDevicesByDid(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/pb.Devices/GetDevicesByDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDeviceSn(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/pb.Devices/GetDeviceSn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
type DevicesServer interface {
	VerificationDeviceBySn(context.Context, *DeviceRequest) (*DeviceReply, error)
	SetDeviceBySn(context.Context, *DeviceRequest) (*DeviceReply, error)
	DeleteDeviceByDid(context.Context, *DeviceRequest) (*DeviceReply, error)
	UpdateDeviceByDid(context.Context, *DeviceRequest) (*DeviceReply, error)
	GetDevicesByUid(context.Context, *DeviceRequest) (*BatchDeviceRe, error)
	GetDevicesByDid(context.Context, *DeviceRequest) (*DeviceReply, error)
	GetDeviceSn(context.Context, *DeviceRequest) (*DeviceReply, error)
}

func RegisterDevicesServer(s *grpc.Server, srv DevicesServer) {
	s.RegisterService(&_Devices_serviceDesc, srv)
}

func _Devices_VerificationDeviceBySn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).VerificationDeviceBySn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/VerificationDeviceBySn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).VerificationDeviceBySn(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_SetDeviceBySn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).SetDeviceBySn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/SetDeviceBySn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).SetDeviceBySn(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeleteDeviceByDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeleteDeviceByDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/DeleteDeviceByDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeleteDeviceByDid(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_UpdateDeviceByDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).UpdateDeviceByDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/UpdateDeviceByDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).UpdateDeviceByDid(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDevicesByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDevicesByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/GetDevicesByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDevicesByUid(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDevicesByDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDevicesByDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/GetDevicesByDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDevicesByDid(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDeviceSn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDeviceSn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Devices/GetDeviceSn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDeviceSn(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Devices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerificationDeviceBySn",
			Handler:    _Devices_VerificationDeviceBySn_Handler,
		},
		{
			MethodName: "SetDeviceBySn",
			Handler:    _Devices_SetDeviceBySn_Handler,
		},
		{
			MethodName: "DeleteDeviceByDid",
			Handler:    _Devices_DeleteDeviceByDid_Handler,
		},
		{
			MethodName: "UpdateDeviceByDid",
			Handler:    _Devices_UpdateDeviceByDid_Handler,
		},
		{
			MethodName: "GetDevicesByUid",
			Handler:    _Devices_GetDevicesByUid_Handler,
		},
		{
			MethodName: "GetDevicesByDid",
			Handler:    _Devices_GetDevicesByDid_Handler,
		},
		{
			MethodName: "GetDeviceSn",
			Handler:    _Devices_GetDeviceSn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/device.proto",
}

func init() { proto.RegisterFile("pb/device.proto", fileDescriptor_device_db9d7746ec92d4b1) }

var fileDescriptor_device_db9d7746ec92d4b1 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x37, 0x9b, 0xfd, 0x7b, 0xd6, 0xec, 0x66, 0xa7, 0xa5, 0x0c, 0x45, 0x24, 0x2c, 0x16,
	0x62, 0x85, 0xaa, 0x2d, 0x22, 0xde, 0x78, 0xd1, 0x2e, 0x88, 0x60, 0xa5, 0xa4, 0x6e, 0xef, 0xb3,
	0x99, 0x53, 0x3b, 0x90, 0x66, 0x62, 0x66, 0x52, 0xd9, 0x17, 0xf0, 0x0d, 0xbc, 0xf6, 0x09, 0x7c,
	0x47, 0xc9, 0x4c, 0x12, 0x37, 0xc5, 0x96, 0xd5, 0x0b, 0xaf, 0xbc, 0xcb, 0xf7, 0xfb, 0xce, 0xd9,
	0xcc, 0x9c, 0xf3, 0xb1, 0x81, 0x49, 0xba, 0x7c, 0xc6, 0xf0, 0x86, 0x47, 0x78, 0x90, 0x66, 0x42,
	0x09, 0xd2, 0x4e, 0x97, 0xb3, 0x6f, 0x1d, 0x70, 0xe6, 0x1a, 0x06, 0xf8, 0x39, 0x47, 0xa9, 0xc8,
	0x0e, 0xf4, 0xa4, 0xc8, 0xb3, 0x08, 0xa9, 0xe5, 0x59, 0xfe, 0x30, 0x28, 0x15, 0x71, 0xc1, 0x66,
	0x9c, 0xd1, 0xb6, 0x67, 0xf9, 0xdd, 0xa0, 0x78, 0x2c, 0x48, 0xce, 0x19, 0xb5, 0x0d, 0xc9, 0x0d,
	0x49, 0x39, 0xa3, 0x1d, 0x43, 0x52, 0xce, 0xc8, 0x36, 0x74, 0x95, 0x28, 0xaa, 0xba, 0x9a, 0x19,
	0x41, 0xc6, 0xd0, 0x96, 0x09, 0xed, 0xe9, 0xdf, 0x6f, 0xcb, 0x84, 0x3c, 0x84, 0xa1, 0x39, 0xd9,
	0x69, 0x18, 0xd1, 0xbe, 0xc6, 0xbf, 0x00, 0x79, 0x04, 0x60, 0xc4, 0x87, 0xf0, 0x1a, 0xe9, 0x40,
	0xdb, 0x6b, 0x84, 0x3c, 0x06, 0xc7, 0xa8, 0x0b, 0xcc, 0x24, 0x17, 0x09, 0x1d, 0xea, 0x92, 0x26,
	0x24, 0x3e, 0x4c, 0xa4, 0xb8, 0x54, 0x5f, 0xc2, 0xac, 0xae, 0x03, 0x5d, 0x77, 0x1b, 0x93, 0x3d,
	0xe8, 0xa5, 0x98, 0x5d, 0x73, 0x45, 0x47, 0x9e, 0xe5, 0x8f, 0x0f, 0x9d, 0x83, 0x74, 0x79, 0x30,
	0xc7, 0x9b, 0x33, 0x0d, 0x83, 0xd2, 0x24, 0x7b, 0xd0, 0x55, 0xab, 0x14, 0x25, 0x7d, 0xa0, 0xab,
	0x26, 0x65, 0x15, 0x8f, 0xf0, 0x63, 0x81, 0x03, 0xe3, 0x16, 0x13, 0xe0, 0x92, 0x61, 0x4c, 0x1d,
	0xcf, 0xf2, 0x9d, 0xc0, 0x08, 0x4d, 0x93, 0x34, 0x57, 0x74, 0xac, 0xcf, 0x60, 0x04, 0xd9, 0x85,
	0x41, 0x8c, 0xec, 0x54, 0x14, 0xe5, 0x13, 0x3d, 0xb0, 0x5a, 0x97, 0xde, 0x89, 0x88, 0x45, 0x46,
	0xdd, 0xda, 0xd3, 0xba, 0xf4, 0xde, 0xf3, 0x4f, 0x57, 0x8a, 0x4e, 0x6b, 0x4f, 0xeb, 0xd2, 0x3b,
	0x57, 0xa1, 0x42, 0x4a, 0x6a, 0x4f, 0x6b, 0x42, 0xa1, 0x1f, 0xe6, 0x8c, 0x8b, 0x77, 0x8c, 0x6e,
	0x69, 0xab, 0x92, 0xb3, 0x1f, 0x1d, 0x18, 0x55, 0xb9, 0x48, 0xe3, 0xd5, 0xff, 0x54, 0xfc, 0x93,
	0x54, 0xec, 0xc2, 0x40, 0x5e, 0x85, 0x19, 0x2e, 0xb2, 0xb8, 0x0c, 0x46, 0xad, 0x09, 0x81, 0x4e,
	0x24, 0x18, 0x96, 0xb9, 0xd0, 0xcf, 0x8d, 0xbc, 0xb8, 0xf7, 0xe4, 0x65, 0x7a, 0x4f, 0x5e, 0xc8,
	0x3d, 0x79, 0xd9, 0xba, 0x3b, 0x2f, 0xdb, 0xcd, 0xbc, 0x7c, 0xb5, 0xc0, 0x39, 0x0e, 0x55, 0x74,
	0x55, 0x85, 0xe6, 0xce, 0xc4, 0x54, 0xf7, 0x68, 0xaf, 0xdd, 0xe3, 0x09, 0xf4, 0xcd, 0x5a, 0x24,
	0xb5, 0x3d, 0xdb, 0x1f, 0xad, 0x8f, 0x4d, 0xe7, 0x2f, 0xa8, 0xfc, 0x62, 0xed, 0x4a, 0xa8, 0x30,
	0x3e, 0x11, 0x79, 0xa2, 0xca, 0x4c, 0xad, 0x91, 0x7d, 0xaf, 0xca, 0xad, 0x1e, 0x37, 0xe9, 0x83,
	0x7d, 0x86, 0xca, 0x6d, 0x91, 0x01, 0x74, 0x16, 0x12, 0x33, 0xd7, 0xda, 0x7f, 0x0a, 0xc3, 0x7a,
	0x6d, 0x64, 0x0c, 0x50, 0x8b, 0xe7, 0x6e, 0xab, 0xa1, 0x5f, 0xb8, 0xd6, 0xe1, 0x77, 0x1b, 0xfa,
	0xf3, 0xf2, 0xd5, 0x6f, 0x60, 0xe7, 0x02, 0x33, 0x7e, 0xc9, 0xa3, 0x50, 0x71, 0x91, 0x18, 0x7c,
	0xbc, 0x3a, 0x4f, 0xc8, 0x74, 0xfd, 0xb8, 0xfa, 0x6f, 0x74, 0xf7, 0xf6, 0x0d, 0x66, 0x2d, 0xf2,
	0x12, 0x9c, 0x73, 0x54, 0x7f, 0xdc, 0xf6, 0x1a, 0xa6, 0x73, 0x8c, 0x51, 0x61, 0xd5, 0x39, 0xe7,
	0x6c, 0xf3, 0xd6, 0x45, 0xca, 0xc2, 0xbf, 0x6b, 0x9d, 0xbc, 0xad, 0x0e, 0x2b, 0x8f, 0x57, 0x8b,
	0xdf, 0x37, 0x6a, 0xd4, 0xd8, 0xfb, 0xac, 0x45, 0x5e, 0x35, 0x5b, 0x37, 0x7f, 0xe7, 0x11, 0x8c,
	0xea, 0xc6, 0x4d, 0xc7, 0xb3, 0xec, 0xe9, 0x8f, 0xd9, 0xd1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x5e, 0x17, 0x01, 0xcc, 0xdf, 0x06, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	TestUser
	AddTestUserReq
	AddTestUserRes
	DelTestUserReq
	DelTestUserRes
	GetTestUsersReq
	GetTestUsersRes
	PutTestUserReq
	PutTestUserRes
	GetTestUserReq
	GetTestUserRes
	GetUserByUsernameReq
	GetUserByUsernameRes
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestUser struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Tid        int64  `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
	Username   string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime int64  `protobuf:"varint,5,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *TestUser) Reset()                    { *m = TestUser{} }
func (m *TestUser) String() string            { return proto.CompactTextString(m) }
func (*TestUser) ProtoMessage()               {}
func (*TestUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TestUser) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TestUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TestUser) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TestUser) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type AddTestUserReq struct {
	TestUser *TestUser `protobuf:"bytes,1,opt,name=testUser" json:"testUser,omitempty"`
}

func (m *AddTestUserReq) Reset()                    { *m = AddTestUserReq{} }
func (m *AddTestUserReq) String() string            { return proto.CompactTextString(m) }
func (*AddTestUserReq) ProtoMessage()               {}
func (*AddTestUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddTestUserReq) GetTestUser() *TestUser {
	if m != nil {
		return m.TestUser
	}
	return nil
}

type AddTestUserRes struct {
	TestUser  *TestUser `protobuf:"bytes,1,opt,name=testUser" json:"testUser,omitempty"`
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *AddTestUserRes) Reset()                    { *m = AddTestUserRes{} }
func (m *AddTestUserRes) String() string            { return proto.CompactTextString(m) }
func (*AddTestUserRes) ProtoMessage()               {}
func (*AddTestUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddTestUserRes) GetTestUser() *TestUser {
	if m != nil {
		return m.TestUser
	}
	return nil
}

func (m *AddTestUserRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type DelTestUserReq struct {
	Id  int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Tid int64 `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
}

func (m *DelTestUserReq) Reset()                    { *m = DelTestUserReq{} }
func (m *DelTestUserReq) String() string            { return proto.CompactTextString(m) }
func (*DelTestUserReq) ProtoMessage()               {}
func (*DelTestUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelTestUserReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelTestUserReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type DelTestUserRes struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *DelTestUserRes) Reset()                    { *m = DelTestUserRes{} }
func (m *DelTestUserRes) String() string            { return proto.CompactTextString(m) }
func (*DelTestUserRes) ProtoMessage()               {}
func (*DelTestUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelTestUserRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetTestUsersReq struct {
	Tid   int64 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Count int32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *GetTestUsersReq) Reset()                    { *m = GetTestUsersReq{} }
func (m *GetTestUsersReq) String() string            { return proto.CompactTextString(m) }
func (*GetTestUsersReq) ProtoMessage()               {}
func (*GetTestUsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetTestUsersReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *GetTestUsersReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetTestUsersReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetTestUsersRes struct {
	TestUser   []*TestUser `protobuf:"bytes,1,rep,name=testUser" json:"testUser,omitempty"`
	ErrorCode  int32       `protobuf:"varint,2,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	TotalCount int32       `protobuf:"varint,3,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (m *GetTestUsersRes) Reset()                    { *m = GetTestUsersRes{} }
func (m *GetTestUsersRes) String() string            { return proto.CompactTextString(m) }
func (*GetTestUsersRes) ProtoMessage()               {}
func (*GetTestUsersRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetTestUsersRes) GetTestUser() []*TestUser {
	if m != nil {
		return m.TestUser
	}
	return nil
}

func (m *GetTestUsersRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTestUsersRes) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type PutTestUserReq struct {
	TestUser *TestUser `protobuf:"bytes,1,opt,name=testUser" json:"testUser,omitempty"`
}

func (m *PutTestUserReq) Reset()                    { *m = PutTestUserReq{} }
func (m *PutTestUserReq) String() string            { return proto.CompactTextString(m) }
func (*PutTestUserReq) ProtoMessage()               {}
func (*PutTestUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PutTestUserReq) GetTestUser() *TestUser {
	if m != nil {
		return m.TestUser
	}
	return nil
}

type PutTestUserRes struct {
	TestUser  *TestUser `protobuf:"bytes,1,opt,name=testUser" json:"testUser,omitempty"`
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *PutTestUserRes) Reset()                    { *m = PutTestUserRes{} }
func (m *PutTestUserRes) String() string            { return proto.CompactTextString(m) }
func (*PutTestUserRes) ProtoMessage()               {}
func (*PutTestUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PutTestUserRes) GetTestUser() *TestUser {
	if m != nil {
		return m.TestUser
	}
	return nil
}

func (m *PutTestUserRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetTestUserReq struct {
	Id  int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Tid int64 `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
}

func (m *GetTestUserReq) Reset()                    { *m = GetTestUserReq{} }
func (m *GetTestUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetTestUserReq) ProtoMessage()               {}
func (*GetTestUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTestUserReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetTestUserReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type GetTestUserRes struct {
	TestUser  *TestUser `protobuf:"bytes,1,opt,name=testUser" json:"testUser,omitempty"`
	ErrorCode int32     `protobuf:"varint,2,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetTestUserRes) Reset()                    { *m = GetTestUserRes{} }
func (m *GetTestUserRes) String() string            { return proto.CompactTextString(m) }
func (*GetTestUserRes) ProtoMessage()               {}
func (*GetTestUserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetTestUserRes) GetTestUser() *TestUser {
	if m != nil {
		return m.TestUser
	}
	return nil
}

func (m *GetTestUserRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type GetUserByUsernameReq struct {
	Tid      int64  `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *GetUserByUsernameReq) Reset()                    { *m = GetUserByUsernameReq{} }
func (m *GetUserByUsernameReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserByUsernameReq) ProtoMessage()               {}
func (*GetUserByUsernameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetUserByUsernameReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *GetUserByUsernameReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUserByUsernameRes struct {
	ErrorCode int32 `protobuf:"varint,2,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
}

func (m *GetUserByUsernameRes) Reset()                    { *m = GetUserByUsernameRes{} }
func (m *GetUserByUsernameRes) String() string            { return proto.CompactTextString(m) }
func (*GetUserByUsernameRes) ProtoMessage()               {}
func (*GetUserByUsernameRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetUserByUsernameRes) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*TestUser)(nil), "user.TestUser")
	proto.RegisterType((*AddTestUserReq)(nil), "user.AddTestUserReq")
	proto.RegisterType((*AddTestUserRes)(nil), "user.AddTestUserRes")
	proto.RegisterType((*DelTestUserReq)(nil), "user.DelTestUserReq")
	proto.RegisterType((*DelTestUserRes)(nil), "user.DelTestUserRes")
	proto.RegisterType((*GetTestUsersReq)(nil), "user.GetTestUsersReq")
	proto.RegisterType((*GetTestUsersRes)(nil), "user.GetTestUsersRes")
	proto.RegisterType((*PutTestUserReq)(nil), "user.PutTestUserReq")
	proto.RegisterType((*PutTestUserRes)(nil), "user.PutTestUserRes")
	proto.RegisterType((*GetTestUserReq)(nil), "user.GetTestUserReq")
	proto.RegisterType((*GetTestUserRes)(nil), "user.GetTestUserRes")
	proto.RegisterType((*GetUserByUsernameReq)(nil), "user.GetUserByUsernameReq")
	proto.RegisterType((*GetUserByUsernameRes)(nil), "user.GetUserByUsernameRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestUserServer service

type TestUserServerClient interface {
	AddTestUser(ctx context.Context, in *AddTestUserReq, opts ...grpc.CallOption) (*AddTestUserRes, error)
	DelTestUser(ctx context.Context, in *DelTestUserReq, opts ...grpc.CallOption) (*DelTestUserRes, error)
	GetTestUsers(ctx context.Context, in *GetTestUsersReq, opts ...grpc.CallOption) (*GetTestUsersRes, error)
	PutTestUser(ctx context.Context, in *PutTestUserReq, opts ...grpc.CallOption) (*PutTestUserRes, error)
	GetTestUser(ctx context.Context, in *GetTestUserReq, opts ...grpc.CallOption) (*GetTestUserRes, error)
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameReq, opts ...grpc.CallOption) (*GetUserByUsernameRes, error)
}

type testUserServerClient struct {
	cc *grpc.ClientConn
}

func NewTestUserServerClient(cc *grpc.ClientConn) TestUserServerClient {
	return &testUserServerClient{cc}
}

func (c *testUserServerClient) AddTestUser(ctx context.Context, in *AddTestUserReq, opts ...grpc.CallOption) (*AddTestUserRes, error) {
	out := new(AddTestUserRes)
	err := grpc.Invoke(ctx, "/user.TestUserServer/AddTestUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUserServerClient) DelTestUser(ctx context.Context, in *DelTestUserReq, opts ...grpc.CallOption) (*DelTestUserRes, error) {
	out := new(DelTestUserRes)
	err := grpc.Invoke(ctx, "/user.TestUserServer/DelTestUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUserServerClient) GetTestUsers(ctx context.Context, in *GetTestUsersReq, opts ...grpc.CallOption) (*GetTestUsersRes, error) {
	out := new(GetTestUsersRes)
	err := grpc.Invoke(ctx, "/user.TestUserServer/GetTestUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUserServerClient) PutTestUser(ctx context.Context, in *PutTestUserReq, opts ...grpc.CallOption) (*PutTestUserRes, error) {
	out := new(PutTestUserRes)
	err := grpc.Invoke(ctx, "/user.TestUserServer/PutTestUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUserServerClient) GetTestUser(ctx context.Context, in *GetTestUserReq, opts ...grpc.CallOption) (*GetTestUserRes, error) {
	out := new(GetTestUserRes)
	err := grpc.Invoke(ctx, "/user.TestUserServer/GetTestUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUserServerClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameReq, opts ...grpc.CallOption) (*GetUserByUsernameRes, error) {
	out := new(GetUserByUsernameRes)
	err := grpc.Invoke(ctx, "/user.TestUserServer/GetUserByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestUserServer service

type TestUserServerServer interface {
	AddTestUser(context.Context, *AddTestUserReq) (*AddTestUserRes, error)
	DelTestUser(context.Context, *DelTestUserReq) (*DelTestUserRes, error)
	GetTestUsers(context.Context, *GetTestUsersReq) (*GetTestUsersRes, error)
	PutTestUser(context.Context, *PutTestUserReq) (*PutTestUserRes, error)
	GetTestUser(context.Context, *GetTestUserReq) (*GetTestUserRes, error)
	GetUserByUsername(context.Context, *GetUserByUsernameReq) (*GetUserByUsernameRes, error)
}

func RegisterTestUserServerServer(s *grpc.Server, srv TestUserServerServer) {
	s.RegisterService(&_TestUserServer_serviceDesc, srv)
}

func _TestUserServer_AddTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUserServerServer).AddTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.TestUserServer/AddTestUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUserServerServer).AddTestUser(ctx, req.(*AddTestUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestUserServer_DelTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTestUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUserServerServer).DelTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.TestUserServer/DelTestUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUserServerServer).DelTestUser(ctx, req.(*DelTestUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestUserServer_GetTestUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUserServerServer).GetTestUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.TestUserServer/GetTestUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUserServerServer).GetTestUsers(ctx, req.(*GetTestUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestUserServer_PutTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTestUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUserServerServer).PutTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.TestUserServer/PutTestUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUserServerServer).PutTestUser(ctx, req.(*PutTestUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestUserServer_GetTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUserServerServer).GetTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.TestUserServer/GetTestUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUserServerServer).GetTestUser(ctx, req.(*GetTestUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestUserServer_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestUserServerServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.TestUserServer/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestUserServerServer).GetUserByUsername(ctx, req.(*GetUserByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestUserServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.TestUserServer",
	HandlerType: (*TestUserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTestUser",
			Handler:    _TestUserServer_AddTestUser_Handler,
		},
		{
			MethodName: "DelTestUser",
			Handler:    _TestUserServer_DelTestUser_Handler,
		},
		{
			MethodName: "GetTestUsers",
			Handler:    _TestUserServer_GetTestUsers_Handler,
		},
		{
			MethodName: "PutTestUser",
			Handler:    _TestUserServer_PutTestUser_Handler,
		},
		{
			MethodName: "GetTestUser",
			Handler:    _TestUserServer_GetTestUser_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _TestUserServer_GetUserByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6b, 0xe3, 0x30,
	0x10, 0x8d, 0xed, 0x78, 0x49, 0x26, 0x8b, 0x77, 0x57, 0x64, 0xc1, 0x88, 0xd2, 0x06, 0x9d, 0x42,
	0x0f, 0x39, 0xa4, 0xbd, 0xb5, 0x14, 0xda, 0xa4, 0xe4, 0x14, 0x28, 0x6e, 0x72, 0xc9, 0xa5, 0xb8,
	0xb1, 0x28, 0x86, 0x24, 0x4e, 0x25, 0xb9, 0x50, 0xfa, 0x0f, 0x7a, 0xed, 0x1f, 0x2e, 0x92, 0x3f,
	0x22, 0x3b, 0xee, 0x77, 0x6e, 0xd2, 0xf3, 0x7b, 0x33, 0xa3, 0x79, 0x33, 0x06, 0x88, 0x39, 0x65,
	0xbd, 0x35, 0x8b, 0x44, 0x84, 0xea, 0xf2, 0x4c, 0x9e, 0x0d, 0x68, 0x4c, 0x28, 0x17, 0x53, 0x4e,
	0x19, 0x72, 0xc0, 0x0c, 0x03, 0xd7, 0xe8, 0x18, 0x5d, 0xdb, 0x33, 0xc3, 0x00, 0xfd, 0x05, 0x4b,
	0x84, 0x81, 0x6b, 0x76, 0x8c, 0xae, 0xe5, 0xc9, 0x23, 0xc2, 0xd0, 0x90, 0xb2, 0x95, 0xbf, 0xa4,
	0xae, 0xd5, 0x31, 0xba, 0x4d, 0x2f, 0xbf, 0xa3, 0x03, 0x68, 0xcd, 0x19, 0xf5, 0x05, 0xbd, 0x11,
	0xe1, 0x92, 0xba, 0x75, 0xa5, 0x82, 0x04, 0x9a, 0x84, 0x09, 0x21, 0x5e, 0x07, 0x39, 0xc1, 0x4e,
	0x08, 0x09, 0x24, 0x09, 0xe4, 0x14, 0x9c, 0xf3, 0x20, 0xc8, 0xca, 0xf1, 0xe8, 0x3d, 0x3a, 0x84,
	0x86, 0x48, 0xaf, 0xaa, 0xae, 0x56, 0xdf, 0xe9, 0xa9, 0x37, 0xe4, 0xa4, 0xfc, 0x3b, 0x99, 0x95,
	0xd4, 0xfc, 0x2b, 0x6a, 0xb4, 0x07, 0xcd, 0x4b, 0xc6, 0x22, 0x36, 0x88, 0x02, 0xaa, 0x5e, 0x6c,
	0x7b, 0x1b, 0x80, 0xf4, 0xc1, 0x19, 0xd2, 0x85, 0x5e, 0xd9, 0x87, 0xbd, 0x22, 0xbd, 0x92, 0x86,
	0x17, 0x73, 0x18, 0xe5, 0x1c, 0x63, 0xf8, 0x33, 0xa2, 0x22, 0xe3, 0x73, 0x99, 0x24, 0x0d, 0x6a,
	0x6c, 0x0c, 0x40, 0x50, 0x5f, 0xfb, 0x77, 0x59, 0x85, 0xea, 0x8c, 0xda, 0x60, 0xcf, 0xa3, 0x78,
	0x25, 0x94, 0x23, 0xb6, 0x97, 0x5c, 0xc8, 0x53, 0x39, 0x5c, 0xb9, 0x1f, 0xd6, 0xf7, 0xfb, 0x81,
	0xf6, 0x01, 0x44, 0x24, 0xfc, 0xc5, 0x40, 0xcb, 0xab, 0x21, 0xd2, 0xc9, 0xab, 0x58, 0xfc, 0xc0,
	0xc9, 0x82, 0x7a, 0xc7, 0x4e, 0x6a, 0x6d, 0xf9, 0x9c, 0x93, 0xb3, 0x92, 0x66, 0x97, 0xf5, 0x0c,
	0xa1, 0x3d, 0xa2, 0x8a, 0x78, 0xf1, 0x38, 0x4d, 0x57, 0xa9, 0xda, 0x7a, 0x7d, 0xf7, 0xcc, 0xe2,
	0xee, 0x91, 0xe3, 0xca, 0x28, 0xfc, 0xfd, 0xdc, 0xfd, 0x17, 0x0b, 0x9c, 0xac, 0xe0, 0x6b, 0xca,
	0x1e, 0x28, 0x43, 0x27, 0xd0, 0xd2, 0x96, 0x08, 0xb5, 0x93, 0x57, 0x15, 0xb7, 0x12, 0x57, 0xa1,
	0x9c, 0xd4, 0xa4, 0x58, 0x9b, 0xf8, 0x4c, 0x5c, 0x5c, 0x1c, 0x5c, 0x85, 0x4a, 0xf1, 0x19, 0xfc,
	0xd6, 0xe7, 0x15, 0xfd, 0x4f, 0x78, 0xa5, 0x95, 0xc0, 0x95, 0x70, 0x9a, 0x5c, 0x1b, 0x9a, 0x2c,
	0x79, 0x71, 0x0a, 0x71, 0x15, 0x9a, 0x8a, 0xb5, 0x88, 0x99, 0xb8, 0x38, 0x28, 0xb8, 0x0a, 0x95,
	0xe2, 0x31, 0xfc, 0xdb, 0x6a, 0x3e, 0xc2, 0x39, 0x79, 0xcb, 0x5b, 0xfc, 0xf6, 0x37, 0x4e, 0x6a,
	0xb7, 0xbf, 0xd4, 0xff, 0xf9, 0xe8, 0x35, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x2a, 0x3e, 0x5a, 0xad,
	0x05, 0x00, 0x00,
}
